// Specification JCup
import java.util.*; 

import java_cup.runtime.*;
import java.lang.*;
import java.util.*;
import java.io.*;


parser code {:
	public static void main(String args[]) throws Exception {
		new parser(new Yylex(System.in)).parse();
	}

	public void syntax_error(Symbol cur_token) { 
		// n'interrompt pas la compil... 
		// on est par defaut dans l'etat error qui permet ensuite la recup
		// par défaut : report_error("syntax error", null);
		report_error("Syntaxe incorrecte <"+tokenToString(cur_token)+">", null);        
	}

	public void report_error(String message, Object info) {   
		// n'interrompt pas la compil
		if (info == null) System.err.println("Mon erreur <"+ ptext()+ "> ligne "+ pline() + ", colonne " + pcolumn() + " : " + message);
		else System.err.println("Mon erreur <"+ptext()+ "> ligne "+ pline() + ", colonne " + pcolumn() + " : " +message+" : "+info);
		System.err.println("-> mais on continue l'analyse... ");
	}

	public void unrecovered_syntax_error(Symbol cur_token) {
    	// par defaut : report_fatal_error("Couldn't repair and continue parse", null);
		// on n'a pas reussi a faire de la recup
		report_fatal_error("Recuperation impossible <"+tokenToString(cur_token)+">", null);   // interrompt la compil     
	}

	public void report_fatal_error(String message, Object info) {  
		// qd cette fct est appelee, message vaut par defaut "Couldn't repair and continue parse"
		String m = "Mon erreur fatale <"+ ptext()+ "> ligne " + pline() + ", colonne " + pcolumn() + " : " + message;
		if (info == null) System.err.println(m);
		else System.err.println(m+" : "+info);
		System.err.println("-> arrêt de l'analyse...");
		done_parsing(); // interrompt la compil
  	}

	public int pline(){
		return ((Yylex)getScanner()).getYyLine();
	}
	public int pcolumn(){
		return ((Yylex)getScanner()).getYyColumn();
	}
	public String ptext(){
		return ((Yylex)getScanner()).getYyText();
	}

	public String tokenToString (Symbol token) {
// qqs exemples pour voir...
   //  switch (token.sym) {
//	case sym.SI : return "SI"; 
//	case sym.CHAINE : return "CHAINE "+token.value;  
//	case sym.ENTIER : return "ENTIER "+token.value;  
	//  ... A compléter !!
	return "Token imprévu ou error";
	//}
}

	public void verifier_date(String date){
	 String result = "";
	 for(int i =1 ; i<date.length()-1;i++)
	 {
         result += date.charAt(i);
	 }
  

	 String[] res = result.split(",");
     Calendar cal = Calendar.getInstance();
     cal.setLenient(false);
	 if(res[0].length()!=4){ report_error("Erreur format date",result);}
     cal.set(Integer.parseInt(res[0]),Integer.parseInt(res[1]), Integer.parseInt(res[2]));
     try {
        cal.getTime();
     }
    catch (Exception e) {
    report_error("Erreur format date",result);
    }




	}
       
      
      public FileWriter writer(){

            
		
                         FileWriter fileWriter = null;
                try{
			fileWriter = new FileWriter("/home/zaki/Desktop/Git/CMaisonUser.java\n");
                     
			//inherited method from java.io.OutputStreamWriter 
		} catch (Exception e) {
			e.printStackTrace();
		}

                return fileWriter ; 
                




}
public String types(String s){


s = s.substring(s.indexOf("(") + 1);
s = s.substring(0, s.indexOf(")"));





switch(s){
                        case  "tv" :
 return  "TypeAppareil.AUTRE_APPAREIL_TV";
                          

                        case "hifi" :
                            
  return "TypeAppareil.AUTRE_APPAREIL_HIFI";

                        case "cafetiere" :
                            
  return "TypeAppareil.AUTRE_APPAREIL_CAFE";

                        case "video_proj" :
                               return "TypeAppareil.AUTRE_APPAREIL_VP";


                        case  "lave_linge" :
                                return "TypeAppareil.AUTRE_APPAREIL_LL";

                        case  "lave_vaisselle" :
                             return "TypeAppareil.AUTRE_APPAREIL_LV";
                        
                        case  "seche_linge" :
                             return "TypeAppareil.AUTRE_APPAREIL_SL";
			
			case  "portail" :
                             return "TypeAppareil.AUTRE_APPAREIL_PORTAIL";



           default : return s ; 
       

}}

    


















:}
action code {:

HashMap<String, String> variables = new HashMap<String, String>();
HashMap<String, String> commandes = new HashMap<String, String>();
ArrayList<String> Global = new ArrayList<String>();
List<String> eclairage = Arrays.asList("etat", "allumer", "eteindre", "tamiser");
List<String> alarme = Arrays.asList("etat","allumer", "allumer_partiel", "eteindre");
List<String> chauffage = Arrays.asList("etat", "allumer","allumer_eco", "eteindre");
List<String> fenvol = Arrays.asList("etat", "ouvrir","ouvrir_partiel", "fermer", "fermer_partiel");
List<String> autre = Arrays.asList("etat", "allumer", "eteindre");
String ens = "";
String use="" ;
FileWriter file = null; 






:}

non terminal S; // axiome

non terminal da; // declaration appareils
non terminal dad; // declaration appareils detaillé

non terminal ds; // declaration des scenarios
non terminal dsd; // declaration scenarios detaillés
non terminal scenario; // genere un scenario

non terminal MOT; // mot pour generer des nom,nom,nom,nom
non terminal x; // genere soit appareil ou nom
non terminal sinon; // genere le blok sinon apres si

non terminal di;
non terminal dc; // declaration commandes 
non terminal String dat;
non terminal w;
non terminal did,dcd;
non terminal mesgouact;
non terminal msgs;
non terminal msg;




terminal String ACTION; // allumer eteindre ....
terminal String DATE;

terminal String PDO; // debut programme domus
terminal String PDF; // fin programme domus

terminal String COTE;

terminal String DAO; // debut declaration appareil
terminal String DAF; // fin declaration appareil

terminal String DIO; // debut declaration interface
terminal String DIF; // fin declaration interface

terminal String DSO; // debut declaration scenario
terminal String DSF; // fin declaration scenario

terminal String DCO; // debut declaration commande
terminal String DCF; // fin declaration commande


terminal String DSCO; // debut declaration d'un scenario
terminal String DSCF; // fin declaration d'un scenario

terminal String VG; //","
terminal String PT; // "."
terminal String nom; // chaine de caractere
terminal String APPAREIL; // autreappareil(cafe)
terminal String AO; // "{"
terminal String AF; // "}"
terminal String PO; // "("
terminal String PF; // ")"
terminal String EGAL; // "="
terminal String DEGAL; // "=="
terminal String DP; // ":"
terminal String PV; // ";"
terminal String H; // "double cotte"
terminal String ETAT; // .allumé ..
terminal String MSG; // MESSGE("VGFDGDFGFDG")
terminal String CHAINE; // "VGFDGDFGFDG"
terminal String APPAREIL_TYPE; // eclairage volet
terminal String AUTRE_APPAREIL; // autre_appareil(cafe)
terminal String DEFINIR; // definir
terminal String INTERFACE_TYPE ; // interrupteur
terminal String ASSOCIER ; // associer
terminal String PROGRAMMER ; // associer
terminal String cm ; // message
terminal String SI ; // si
terminal String MESSAGE ; // message
terminal String SINON ; // sinon
terminal String POURTOUT ; // pourtout
terminal String FAIT ; // fait
terminal String FAIRE ; // faire
terminal String ETATS ; // ETATS
terminal String FSI ; // fsi
terminal String EXECUTER_SCENARIO; // fsi
terminal String ALORS ; // fsi









//axiome
S ::= PDO {:file = writer (); 
file.write("public class CMaisonUser extends CMaison {\n");  
file.write("public CMaisonUser() {\n");  
file.write("super();\n");  

  
  


           :} da {: 

for (String key : variables.keySet())
{String str = variables.get(key) ;
if (str.startsWith("autre_appareil(")){str="autre_appareil";}
switch(str){
                        case  "eclairage" :
                               file.write("CEclairage "+key+ " = new CEclairage(\""+key+"\",TypeAppareil.ECLAIRAGE);\n");
      file.write("ma_liste_appareils.add("+key+");\n");  

                      		break;
			case "alarme" :
                               file.write("CAlarme "+key+ " = new CAlarme(\""+key+"\",TypeAppareil.ALARME);\n");
      file.write("ma_liste_appareils.add("+key+");\n");  

                    		  break;

			case "chauffage" :
                          file.write("CEclairage "+key+ " = new CEclairage(\""+key+"\",TypeAppareil.CHAUFFAGE);\n");
      file.write("ma_liste_appareils.add("+key+");\n");  

                    		  break;
			case "fenetre" :
                       file.write("CVoletFenetre "+key+ " = new CVoletFenetre(\""+key+"\",TypeAppareil.FENETRE);\n");
      file.write("ma_liste_appareils.add("+key+");\n");  

                     		 break;
			case  "volet" :
                    file.write("CVoletFenetre  "+key+ " = new CVoletFenetre (\""+key+"\",TypeAppareil.VOLET);\n");
      file.write("ma_liste_appareils.add("+key+");\n");  

                     		 break;
			case  "autre_appareil" :
String ks = variables.get(key) ; 
String st = types(ks);
  file.write("CAutreAppareil  "+key+ " = new CAutreAppareil (\""+key+"\", "+ st+");\n");
   file.write("ma_liste_appareils.add("+key+");\n");  

                     		 break;
             
                       default : if (str.contains(",")){ String[]  k = str.split(",");                                           
 file.write("CEnsAppareil "+key+ " = new CEnsAppareil(\""+key+"\");\n");
for (int i = 0; i <  k.length ; i++ )
{
    file.write(key+ ".addAppareil("+k[i]+");\n");
}
file.write("ma_liste_ens_appareils.add("+key+ ");\n");
}
                             




}  }



      















:}di {:














:}      ds dc PDF  {:
 System.out.println("Analyse terminne !!");
 try {
				if (file!= null) {
					file.flush();
					file.close();					
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		
  :};


//declaration des appareils
da ::= DAO dad DAF  ;

dad::= APPAREIL_TYPE:type MOT  PT {:

  for (int i=0;i<Global.size();i++){if (!variables.containsKey(Global.get(i))) {
    variables.put(Global.get(i),type);} else {report_error("La variable "+Global.get(i)+" existe deja",Global.get(i));}}
   Global.clear();
:}  dad   // eclairage e1,e2,,,, .



|  AUTRE_APPAREIL:autre MOT  PT {:
   for (int j=0;j<Global.size();j++){if (!variables.containsKey(Global.get(j))) {
   variables.put(Global.get(j),autre);} else {report_error("La variable "+Global.get(j)+" existe deja",Global.get(j));}}
   Global.clear();
:}  dad  // autreappareil(cafeteria) cafe .





| DEFINIR nom:name EGAL AO MOT AF PT {:
   for (int j=0;j<Global.size();j++){ens+=Global.get(j);if ((j+1)< Global.size()){ens+=",";}}if (!variables.containsKey(name)) {
   variables.put(name,ens);} else {report_error("La variable "+name+" existe deja",name);}
ens="";
   Global.clear();
:} dad // definir mon eclairage_salon = {e1,e2}

|  ; //sortir





// declaration des scenarios

ds ::= DSO dsd DSF  ;

dsd ::= DSCO:open {:  
String[] str = open.split(" ");
String u = str[1];
String us= u.substring(0,u.length() - 1 );
commandes.put(us,"scenario");

               :} scenario DSCF:fin     dsd // declaration plusieurs scenarios

| ;  

scenario ::= POURTOUT nom:n DP x {: variables.put(n,use); use=""; :} FAIRE scenario  FAIT PV scenario  {: variables.remove(n);:} // pourtout v:volet faire v.ouvrir ; fait;

| nom:n   PT ACTION:action {:if (!variables.containsKey(n)){report_error("La variable "+n+" n'a pas été declarée",n);}             
           else {
String str = variables.get(n) ; 
if (str.startsWith("autre_appareil(")){str = "autre_appareil"; }
if (variables.containsKey(str)){String[] k = variables.get(str).split(",");str =variables.get( k[0] );}
boolean b = false ; 


switch(str){
                        case  "eclairage" :
                               if (eclairage.contains(action)) { b = true ;}
                      		break;
			case "alarme" :
                                if (alarme.contains(action)) { b = true;} 
                    		  break;
			case "chauffage" :
                                if (chauffage.contains(action)) { b = true;} 
                    		  break;
			case "fenetre" :
                                 if (fenvol.contains(action)){ b = true;} 
                     		 break;
			case  "volet" :
                                if (fenvol.contains(action)) {b = true ;}
                     		 break;
			case  "autre_appareil" :
                               if (autre.contains(action))  {b = true;} 
                     		 break;
                       default : 
                               b = false ;
}

if ( b== false ) {   report_error(action+ " n'est pas autorisee pour la variable "+n,action);     }


}


   :} PV scenario // e1.allumer 

| EXECUTER_SCENARIO nom PV scenario// executer_scenario soirée;

| SI PO nom PT ETAT DEGAL ETATS PF ALORS scenario  sinon  FSI PV  scenario //si(rad1.etat == eteint) alors rad1.allumer;fsi; ou sinon ...

| msgs PV  scenario// afficher un message 


|;

sinon ::= SINON scenario   | ; // 

x ::= nom:n {:use=n;:} | APPAREIL_TYPE:n {:use=n;:} | AUTRE_APPAREIL:n {:use=n;:};


//<DECLARATION_INTERFACES>

di ::= DIO did DIF  ;  
did ::= INTERFACE_TYPE:type MOT PT {:
   for (int j=0;j<Global.size();j++){if (!commandes.containsKey(Global.get(j))) {
   commandes.put(Global.get(j),type);} else {report_error("L'interface "+Global.get(j)+" existe deja",Global.get(j));}}
   Global.clear();

:}  did | ; // interrupteur b1, b2.


//<DECLARATION_COMMANDES>
dc::= DCO dcd DCF ;

dcd ::= ASSOCIER nom:name  EGAL nom PT dcd {: if (!commandes.containsKey(name)){report_error("L'interface "+name+" n'a pas été declarée",name);}


 :}

| ASSOCIER nom:name EGAL AO MOT AF PT  dcd {: if (!commandes.containsKey(name)){report_error("L'interface "+name+" n'a pas été declarée",name);}


 :}

|PROGRAMMER nom:name EGAL AO dat AF PT dcd {: if (!commandes.containsKey(name)){report_error("Le scenario "+name+" n'a pas été declarée",name);}


 :}

|PROGRAMMER nom:name EGAL DATE:d PT dcd {: if (!commandes.containsKey(name)){report_error("Le scenario "+name+" n'a pas été declarée",name);}


 :}

| ;



dat ::= DATE:dd VG dat {: verifier_date(dd); :} 
| DATE:dd {: verifier_date(dd); :}  ;

mesgouact ::= nom PT ACTION | msgs |mesgouact PV  nom PT ACTION  | mesgouact PV  msgs   ;

MOT ::= nom:x {:Global.add(x);:}VG MOT | nom:x {: Global.add(x); :};





msgs ::= MESSAGE PO msg PF ;

msg ::= nom VG msg |cm VG msg | nom | cm | nom PT ETAT msg | nom PT ETAT;




