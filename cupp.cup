// Specification JCup
import java.util.*; 

import java_cup.runtime.*;
import java.lang.*;
import java.util.*;
import java.io.*;


parser code {:
	public static void main(String args[]) throws Exception {
		new parser(new Yylex(System.in)).parse();
	}

	public void syntax_error(Symbol cur_token) { 
		// n'interrompt pas la compil... 
		// on est par defaut dans l'etat error qui permet ensuite la recup
		// par défaut : report_error("syntax error", null);
		report_error("Syntaxe incorrecte <"+tokenToString(cur_token)+">", null);        
	}

	public void report_error(String message, Object info) {   
		// n'interrompt pas la compil
		if (info == null) System.err.println("Mon erreur <"+ ptext()+ "> ligne "+ pline() + ", colonne " + pcolumn() + " : " + message);
		else System.err.println("Mon erreur <"+ptext()+ "> ligne "+ pline() + ", colonne " + pcolumn() + " : " +message+" : "+info);
		System.err.println("-> mais on continue l'analyse... ");
	}

	public void unrecovered_syntax_error(Symbol cur_token) {
    	// par defaut : report_fatal_error("Couldn't repair and continue parse", null);
		// on n'a pas reussi a faire de la recup
		report_fatal_error("Recuperation impossible <"+tokenToString(cur_token)+">", null);   // interrompt la compil     
	}

	public void report_fatal_error(String message, Object info) {  
		// qd cette fct est appelee, message vaut par defaut "Couldn't repair and continue parse"
		String m = "Mon erreur fatale <"+ ptext()+ "> ligne " + pline() + ", colonne " + pcolumn() + " : " + message;
		if (info == null) System.err.println(m);
		else System.err.println(m+" : "+info);
		System.err.println("-> arrêt de l'analyse...");
		done_parsing(); // interrompt la compil
  	}

	public int pline(){
		return ((Yylex)getScanner()).getYyLine();
	}
	public int pcolumn(){
		return ((Yylex)getScanner()).getYyColumn();
	}
	public String ptext(){
		return ((Yylex)getScanner()).getYyText();
	}

	public String tokenToString (Symbol token) {
// qqs exemples pour voir...
   //  switch (token.sym) {
//	case sym.SI : return "SI"; 
//	case sym.CHAINE : return "CHAINE "+token.value;  
//	case sym.ENTIER : return "ENTIER "+token.value;  
	//  ... A compléter !!
	return "Token imprévu ou error";
	//}
}

	public void verifier_date(String date){
	 String result = "";
	 for(int i =1 ; i<date.length()-1;i++)
	 {
         result += date.charAt(i);
	 }
  

	 String[] res = result.split(",");
     Calendar cal = Calendar.getInstance();
     cal.setLenient(false);
	 if(res[0].length()!=4){ report_error("Erreur format date",result);}

     cal.set(Integer.parseInt(res[0]),Integer.parseInt(res[1]), Integer.parseInt(res[2]));
     try {
        cal.getTime();
     }
    catch (Exception e) {
    report_error("Erreur format date",result);
    }




	}
       
      
      public FileWriter writer(){

            
		
                         FileWriter fileWriter = null;
                try{
			fileWriter = new FileWriter("../test/code_exemple_projet/CMaisonUser.java");
                     
			//inherited method from java.io.OutputStreamWriter 
		} catch (Exception e) {
			e.printStackTrace();
		}

                return fileWriter ; 
                
}
public FileWriter writerspecific(){

            
		
                         FileWriter fileWriter = null;
                try{
			fileWriter = new FileWriter("../test/code_exemple_projet/HabitatSpecific.java");
                     
			//inherited method from java.io.OutputStreamWriter 
		} catch (Exception e) {
			e.printStackTrace();
		}

                return fileWriter ; 
                
}




			public int index_of_scenario(HashMap<String,Integer> h ,String nom_sce)
			{
                     return h.get(nom_sce);
			}


                




public String types(String s){


s = s.substring(s.indexOf("(") + 1);
s = s.substring(0, s.indexOf(")"));





switch(s){
                        case  "tv" :
 return  "TypeAppareil.AUTRE_APPAREIL_TV";
                          

                        case "hifi" :
                            
  return "TypeAppareil.AUTRE_APPAREIL_HIFI";

                        case "cafetiere" :
                            
  return "TypeAppareil.AUTRE_APPAREIL_CAFE";

                        case "video_proj" :
                               return "TypeAppareil.AUTRE_APPAREIL_VP";


                        case  "lave_linge" :
                                return "TypeAppareil.AUTRE_APPAREIL_LL";

                        case  "lave_vaisselle" :
                             return "TypeAppareil.AUTRE_APPAREIL_LV";
                        
                        case  "seche_linge" :
                             return "TypeAppareil.AUTRE_APPAREIL_SL";
			
			case  "portail" :
                             return "TypeAppareil.AUTRE_APPAREIL_PORTAIL";



           default : return s ; 
       

}}


	public String retourner_type(String s){


if(s.indexOf('(')==-1)
{
switch(s){
                        case  "eclairage" :
                            return "TypeAppareil.ECLAIRAGE";
                      	
						case "alarme" :
                             return  "TypeAppareil.ALARME";
                    		  

						case "chauffage" :
                              return "TypeAppareil.CHAUFFAGE";
							
							
						case "fenetre" :
                      		 return "TypeAppareil.FENETRE";
						

						case  "volet" :
                   			 return "TypeAppareil.VOLET";
							 
						case  "autre_appareil" :
                             return "TypeAppareil.AutreAppareil";
                     	
             
           default :          
         return s;       
}            

}
else{ return types(s); }

	}




:}
action code {:

HashMap<String, String> variables = new HashMap<String, String>();
HashMap<String, String> commandes = new HashMap<String, String>();
HashMap<String, Integer> scenario_ordre = new HashMap<String, Integer>();
HashMap<String, String> scenario_map = new HashMap<String, String>();
ArrayList<String> Global = new ArrayList<String>();
List<String> eclairage = Arrays.asList("etat", "allumer", "eteindre", "tamiser");
List<String> alarme = Arrays.asList("etat","allumer", "allumer_partiel", "eteindre");
List<String> chauffage = Arrays.asList("etat", "allumer","allumer_eco", "eteindre");
List<String> fenvol = Arrays.asList("etat", "ouvrir","ouvrir_partiel", "fermer", "fermer_partiel");
List<String> autre = Arrays.asList("etat", "allumer", "eteindre");
String ens = "";
String scenario_contenu="";
String use="" ;
FileWriter file = null; 
FileWriter sepi = null; 
int f =0 ;
int c=0;
String typeif ="";
int ordre=0;
String scenario_nom="";
String message_content = " ";
int p=1;
int d=1;
String co = "\\" + "\"";
int ensemble =0;
String imbrication ="";





:}

non terminal S; // axiome

non terminal da; // declaration appareils
non terminal dad; // declaration appareils detaillé

non terminal ds; // declaration des scenarios
non terminal dsd; // declaration scenarios detaillés
non terminal scenario; // genere un scenario

non terminal MOT; // mot pour generer des nom,nom,nom,nom
non terminal String x; // genere soit appareil ou nom
non terminal sinon; // genere le blok sinon apres si

non terminal di;
non terminal dc; // declaration commandes 
non terminal String dat;
non terminal w;
non terminal did,dcd;
non terminal mesgouact;
non terminal String msgs;
non terminal String msg;




terminal String ACTION; // allumer eteindre ....
terminal String DATE;

terminal String PDO; // debut programme domus
terminal String PDF; // fin programme domus

terminal String COTE;

terminal String DAO; // debut declaration appareil
terminal String DAF; // fin declaration appareil

terminal String DIO; // debut declaration interface
terminal String DIF; // fin declaration interface

terminal String DSO; // debut declaration scenario
terminal String DSF; // fin declaration scenario

terminal String DCO; // debut declaration commande
terminal String DCF; // fin declaration commande


terminal String DSCO; // debut declaration d'un scenario
terminal String DSCF; // fin declaration d'un scenario

terminal String VG; //","
terminal String PT; // "."
terminal String nom; // chaine de caractere
terminal String APPAREIL; // autreappareil(cafe)
terminal String AO; // "{"
terminal String AF; // "}"
terminal String PO; // "("
terminal String PF; // ")"
terminal String EGAL; // "="
terminal String DEGAL; // "=="
terminal String DP; // ":"
terminal String PV; // ";"
terminal String H; // "double cotte"
terminal String ETAT; // .allumé ..
terminal String MSG; // MESSGE("VGFDGDFGFDG")
terminal String CHAINE; // "VGFDGDFGFDG"
terminal String APPAREIL_TYPE; // eclairage volet
terminal String AUTRE_APPAREIL; // autre_appareil(cafe)
terminal String DEFINIR; // definir
terminal String INTERFACE_TYPE ; // interrupteur
terminal String ASSOCIER ; // associer
terminal String PROGRAMMER ; // associer
terminal String cm ; // message
terminal String SI ; // si
terminal String MESSAGE ; // message
terminal String SINON ; // sinon
terminal String POURTOUT ; // pourtout
terminal String FAIT ; // fait
terminal String FAIRE ; // faire
terminal String ETATS ; // ETATS
terminal String FSI ; // fsi
terminal String EXECUTER_SCENARIO; // fsi
terminal String ALORS ; // fsi










//axiome
S ::= PDO {:file = writer (); 
sepi = writerspecific();

sepi.write("import java.util.ArrayList;\n");
sepi.write("public class HabitatSpecific extends Habitat {\n");
sepi.write("public HabitatSpecific(ArrayList<CAppareil> lapp, ArrayList<CEnsAppareil> lens, ArrayList<CScenario> lscen, ArrayList<CInterface> lint, ArrayList<CProgrammation> lprog)\n{\n");
sepi.write("super(lapp,lens,lscen,lint,lprog);\n}\n");
sepi.write("public void execScenarioNum(int num)\n{\n System.out.println( \"Execution du scenario \"+this.l_scenarios.get(num).getNomScenario()+\"... \");\n switch(num) {\n");






file.write("public class CMaisonUser extends CMaison {\n");  
file.write("public CMaisonUser() {\n");  
file.write("super();\n");  

  
  


           :} da {: 

for (String key : variables.keySet())
{String str = variables.get(key) ;
if (str.startsWith("autre_appareil(")){str="autre_appareil";}

switch(str){
                        case  "eclairage" :
                               file.write("CEclairage "+key+ " = new CEclairage(\""+key+"\",TypeAppareil.ECLAIRAGE);\n");
      file.write("ma_liste_appareils.add("+key+");\n");  

                      		break;
			case "alarme" :
                               file.write("CAlarme "+key+ " = new CAlarme(\""+key+"\",TypeAppareil.ALARME);\n");
      file.write("ma_liste_appareils.add("+key+");\n");  

                    		  break;

			case "chauffage" :
                          file.write("CEclairage "+key+ " = new CEclairage(\""+key+"\",TypeAppareil.CHAUFFAGE);\n");
      file.write("ma_liste_appareils.add("+key+");\n");  

                    		  break;
			case "fenetre" :
                       file.write("CVoletFenetre "+key+ " = new CVoletFenetre(\""+key+"\",TypeAppareil.FENETRE);\n");
      file.write("ma_liste_appareils.add("+key+");\n");  

                     		 break;
			case  "volet" :
                    file.write("CVoletFenetre  "+key+ " = new CVoletFenetre (\""+key+"\",TypeAppareil.VOLET);\n");
      file.write("ma_liste_appareils.add("+key+");\n");  

                     		 break;
			case  "autre_appareil" :
String ks = variables.get(key) ; 
String st = types(ks);
  file.write("CAutreAppareil  "+key+ " = new CAutreAppareil (\""+key+"\", "+ st+");\n");
   file.write("ma_liste_appareils.add("+key+");\n");  

                     		 break;
                    
                       default : 

}}

for (String keys : variables.keySet()){

if (variables.get(keys).contains(",")){
 String[]  kk = variables.get(keys).split(",");                                           
 file.write("CEnsAppareil "+keys+ " = new CEnsAppareil(\""+keys+"\");\n");
for (int i = 0; i <  kk.length ; i++ )
{
    file.write(keys+ ".addAppareil("+kk[i]+");\n");
}
file.write("ma_liste_ens_appareils.add("+keys+ ");\n");

}

}  



      















:}di {:




for (String key : commandes.keySet())
{String str = commandes.get(key) ;
switch(str){
                        case  "mobile" :
                               file.write("CInterface "+key+ " = new CInterface(\""+key+"\",TypeInterface."+str.toUpperCase()+");\n");
      file.write("ma_liste_interfaces.add("+key+");\n");  

                      		break;
			case "telephone" :
                               file.write("CInterface "+key+ " = new CInterface(\""+key+"\",TypeInterface."+str.toUpperCase()+");\n");
      file.write("ma_liste_interfaces.add("+key+");\n");  

                    		  break;

			case "telecommande" :
                          file.write("CInterface "+key+ " = new CInterface(\""+key+"\",TypeInterface."+str.toUpperCase()+");\n");
      file.write("ma_liste_interfaces.add("+key+");\n");  

                    		  break;
			case "tablette" :
                       file.write("CInterface "+key+ " = new CInterface(\""+key+"\",TypeInterface."+str.toUpperCase()+");\n");
      file.write("ma_liste_interfaces.add("+key+");\n");  

                     		 break;
			case  "interrupteur" : 
                    file.write("CInterface   "+key+ " = new CInterface(\""+key+"\",TypeInterface."+str.toUpperCase()+");\n");
      file.write("ma_liste_interfaces.add("+key+");\n");  

                     		 break;
                       case  "ordinateur" :
                    file.write("CInterface "+key+ " = new CInterface(\""+key+"\",TypeInterface."+str.toUpperCase()+");\n");
      file.write("ma_liste_interfaces.add("+key+");\n");  

                     		 break;
			
             
                       default : ;      




}  }





















:}      ds dc {:







:} PDF  {:

 System.out.println("Analyse terminne !!");
        file.write("monHabitat = new HabitatSpecific(ma_liste_appareils,ma_liste_ens_appareils, ma_liste_scenarios,ma_liste_interfaces, ma_liste_programmations);\n");
        file.write("}\n");
         file.write("}\n");
      for (String key : scenario_ordre.keySet()){

        sepi.write(" case "+scenario_ordre.get(key)+":      \n");
		//System.out.println("l  ecriturte "+ key + "  "+scenario_ordre.get(key));
          sepi.write( scenario_map.get(key).replace("\\","")  +   "\n");
	sepi.write( "break;\n");


}

      sepi.write( "default :     \n");
 sepi.write( "}\n}\n}\n");




















   

 try {
				if (file!= null) {
					file.flush();
					file.close();					
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
try {
				if (sepi!= null) {
					sepi.flush();
					sepi.close();					
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		
  :};


//declaration des appareils
da ::= DAO dad DAF  ;

dad::= APPAREIL_TYPE:type MOT  PT {:

  for (int i=0;i<Global.size();i++){if (!variables.containsKey(Global.get(i))) {
    variables.put(Global.get(i),type);} else {report_error("La variable "+Global.get(i)+" existe deja",Global.get(i));}}
   Global.clear();
:}  dad   // eclairage e1,e2,,,, .



|  AUTRE_APPAREIL:autre MOT  PT {:
   for (int j=0;j<Global.size();j++){if (!variables.containsKey(Global.get(j))) {
   variables.put(Global.get(j),autre);} else {report_error("La variable "+Global.get(j)+" existe deja",Global.get(j));}}
   Global.clear();
:}  dad  // autreappareil(cafeteria) cafe .





| DEFINIR nom:name EGAL AO MOT AF PT {:
   for (int j=0;j<Global.size();j++){ens+=Global.get(j);if ((j+1)< Global.size()){ens+=",";}}if (!variables.containsKey(name)) {
   variables.put(name,ens);} else {report_error("La variable "+name+" existe deja",name);}
ens="";
   Global.clear();
:} dad // definir mon eclairage_salon = {e1,e2}

|  ; //sortir





// declaration des scenarios

ds ::= DSO dsd DSF {:	

				for (int i=0; i<scenario_ordre.size();i++){
					
			for (String key : scenario_map.keySet()) {
				if(i== scenario_ordre.get(key)){
             file.write("\n String "+ key+"_contenu  = " + "\""+ scenario_map.get(key) +" \" ; \n" );
		      file.write("CScenario "+ key +" = new CScenario(\""+key+"\","+key+"_contenu ) ;\n");
			  file.write("ma_liste_scenarios.add("+key+"); \n");
				}
           

		}



				}
			
			
:}  ;

dsd ::= DSCO:open {:  
String[] str = open.split(" ");
String u = str[1];
String us= u.substring(0,u.length() - 1 );
scenario_nom = us ;
commandes.put(us,"scenario");

               :} scenario DSCF:fin {:scenario_map.put(scenario_nom,scenario_contenu);  
			     scenario_ordre.put(scenario_nom,ordre);
				// System.out.println("ordre scenario est "+ scenario_nom + "  "+ordre);
				 ordre++;
				 scenario_nom=""; scenario_contenu=""; 
			    :}      dsd // declaration plusieurs scenarios

| ;  

scenario ::= POURTOUT nom:n DP x:type {: variables.put(n,use); use=""; 
f = 1;
typeif=type;
if(imbrication==""){
imbrication="0";
}
else {int k =(Integer.parseInt(imbrication)+1);
imbrication= ""+k;}

if(variables.containsKey(type)){ // declaration dans un ensemble
ensemble =1;
scenario_contenu+="for(CEnsAppareil ensAppareil"+imbrication+" : this.l_ensembles){" ;
scenario_contenu+="  if (ensAppareil"+imbrication+".nomEnsAppareil.equals("+co+retourner_type(type)+co+")) { ";

}
else if(type.equals("autre_appareil")){ // si autre appareil sans specifications

scenario_contenu+="for(CAppareil appareil"+imbrication+" : this.l_appareils){" ;
scenario_contenu+="  if (appareil"+imbrication+".estTypeAutreAppareil())  { ";

}
else { // appareil ordinaires ou autre_appareil(hifi.....)
ensemble =0;
scenario_contenu+=" for(CAppareil appareil"+imbrication+" : this.l_appareils) {" ;
scenario_contenu+="  if (appareil"+imbrication+".typeAppareil.equals("+retourner_type(type)+")) {   ";

}

:} FAIRE scenario {:scenario_contenu+=" } }"; :} FAIT   PV {:imbrication="";:} scenario  {: variables.remove(n);:} // pourtout v:volet faire v.ouvrir ; fait;

| nom:n   PT ACTION:action {:

if (!variables.containsKey(n)){report_error("La variable "+n+" n'a pas été declarée",n);}             
           else {


if(f == 1){
	if(ensemble==1){ ensemble=0 ;
	scenario_contenu+="for(CAppareil appareil"+imbrication+" : ensAppareil"+imbrication+".lAppareils) appareil"+imbrication+".appliquer(TypeActionAppareil."+action.toUpperCase()+");" ;
	
	}
	else{
  scenario_contenu+="appareil"+imbrication+".appliquer(TypeActionAppareil."+action.toUpperCase()+"); ";

	}
	f =0;
}
else if (c==1){

scenario_contenu+=" appareil"+imbrication+".appliquer(TypeActionAppareil."+action.toUpperCase()+");   " ;
 c=0;

}
else{
scenario_contenu+=" for(CAppareil appareil : this.l_appareils)   {" ;
scenario_contenu+="  if (appareil.getNomAppareil().equals("+co+n+co+"))     ";
scenario_contenu+="appareil.appliquer(TypeActionAppareil."+action.toUpperCase()+"); } ";		
		   }	 

String str = variables.get(n) ; 
if (str.startsWith("autre_appareil(")){str = "autre_appareil"; }
if (variables.containsKey(str)){String[] k = variables.get(str).split(",");str =variables.get( k[0] );}
boolean b = false ; 


switch(str){
                        case  "eclairage" :
                               if (eclairage.contains(action)) { b = true ;}
                      		break;
			case "alarme" :
                                if (alarme.contains(action)) { b = true;} 
                    		  break;
			case "chauffage" :
                                if (chauffage.contains(action)) { b = true;} 
                    		  break;
			case "fenetre" :
                                 if (fenvol.contains(action)){ b = true;} 
                     		 break;
			case  "volet" :
                                if (fenvol.contains(action)) {b = true ;}
                     		 break;
			case  "autre_appareil" :
                               if (autre.contains(action))  {b = true;} 
                     		 break;
                       default : 
                               b = false ;
}

if ( b== false ) {   report_error(action+ " n'est pas autorisee pour la variable "+n,action.toUpperCase());     }


}


   :} PV scenario // e1.allumer 

| EXECUTER_SCENARIO nom:n PV {: scenario_contenu+=" this.execScenarioNum("+index_of_scenario(scenario_ordre,n) +"); " ;  :}  scenario  // executer_scenario soirée;

| SI PO nom:n PT ETAT DEGAL ETATS:e {:
c=1;
String kk="";
int k=0;
if(imbrication==""){
imbrication="0";
}
else { 
k =(Integer.parseInt(imbrication));
kk= ""+k;	
k =(Integer.parseInt(imbrication)+1);
imbrication= ""+k;}

if(f==1){
	f=0;
if(ensemble==1){

scenario_contenu+=" for(CAppareil appareil"+imbrication+" : ensAppareil"+kk+".lAppareils){   ";
scenario_contenu+="{ ";
scenario_contenu+= "if (appareil"+imbrication+".etatAppareil.equals(TypeEtatAppareil."+e.toUpperCase()+")) { ";}

else{

scenario_contenu+=" for(CAppareil appareil"+imbrication+" : this.l_appareils){   ";
scenario_contenu+="if (appareil"+imbrication+".typeAppareil.equals("+retourner_type(typeif)+")){ ";
scenario_contenu+= "if (appareil"+imbrication+".etatAppareil.equals(TypeEtatAppareil."+e.toUpperCase()+")) { ";}
}
else
{
scenario_contenu+=" for(CAppareil appareil"+imbrication+" : this.l_appareils){   ";
scenario_contenu+="if (appareil"+imbrication+".getNomAppareil().equals("+co+n+co+")){ ";
scenario_contenu+= "if (appareil"+imbrication+".etatAppareil.equals(TypeEtatAppareil."+e.toUpperCase()+")) { ";}

:} PF ALORS scenario {:scenario_contenu+="}";:}  sinon {:scenario_contenu+="}}";imbrication=""; :} FSI PV   scenario //si(rad1.etat == eteint) alors rad1.allumer;fsi; ou sinon ...

| msgs PV  scenario {:scenario_contenu+="  System.out.println(" +message_content+ ") ;  " ; message_content="";  :}  // afficher un message 


|;

sinon ::= SINON {:scenario_contenu+="  else { "; :}  scenario  {:scenario_contenu+="} ";:}  | ; // 

x ::= nom:n {: RESULT = n; use=n;:} | APPAREIL_TYPE:n {:  RESULT = n; use=n;:} | AUTRE_APPAREIL:n {: RESULT = n; use=n;:};


//<DECLARATION_INTERFACES>

di ::= DIO did DIF  ;  
did ::= INTERFACE_TYPE:type MOT PT {:
   for (int j=0;j<Global.size();j++){if (!commandes.containsKey(Global.get(j))) {
   commandes.put(Global.get(j),type);} else {report_error("L'interface "+Global.get(j)+" existe deja",Global.get(j));}}
   Global.clear();

:}  did | ; // interrupteur b1, b2.


//<DECLARATION_COMMANDES>
dc::= DCO dcd DCF ;

dcd ::= ASSOCIER nom:name  EGAL nom:scen PT dcd {: if (!commandes.containsKey(name)){report_error("L'interface "+name+" n'a pas été declarée",name);}
 file.write(name+ ".addScenarioAssocie(\""+ scen +"\");\n");


 :}

| ASSOCIER nom:name EGAL AO MOT AF PT  dcd {: if (!commandes.containsKey(name)){report_error("L'interface "+name+" n'a pas été declarée",name);}
 for (int j=0;j<Global.size();j++){
  file.write(name+ ".addScenarioAssocie(\""+ Global.get(j) +"\");\n");
}
 Global.clear();

 :}

|PROGRAMMER nom:name EGAL AO dat AF PT {: if (!commandes.containsKey(name)){report_error("Le scenario "+name+" n'a pas été declarée",name);}
  file.write("CProgrammation p"+ p +" = new CProgrammation(\""+name+"\");\n");
for (int j=0;j<Global.size();j++){
 String ds = Global.get(j).replace("_","-1");
  file.write("CDate p"+ p +"d"+d+" = new CDate"+ds+ ";\n");
 file.write("p"+ p +".addDate(p"+p+"d"+d+");\n");
d++;


}
 file.write("ma_liste_programmations.add(p"+p+");\n");
p++;
  d= 1 ;
Global.clear();
 :} dcd 

|PROGRAMMER nom:name EGAL DATE:dt PT {:verifier_date(dt.replace("_","0001")); if (!commandes.containsKey(name)){report_error("Le scenario "+name+" n'a pas été declarée",name);}
  String ds = dt.replace("_","-1");
  file.write("CProgrammation p"+ p +" = new CProgrammation(\""+name+"\");\n");
  file.write("CDate p"+ p +"d"+d+" = new CDate"+ds+ ";\n");
 file.write("p"+ p +".addDate(p"+p+"d"+d+");\n");
  file.write("ma_liste_programmations.add(p"+p+");\n");
  p++;
  d= 1 ;
           

 :} dcd 

| ;



dat ::= DATE:dd VG dat {:verifier_date( dd.replace("_","0001") ); Global.add(dd);:} 
| DATE:dd {:    verifier_date(dd.replace("_","0001") ); Global.add(dd);:}  ;

mesgouact ::= nom PT ACTION | msgs |mesgouact PV  nom PT ACTION  | mesgouact PV  msgs   ;

MOT ::= nom:x {:Global.add(x);:}VG MOT | nom:x {: Global.add(x); :};





msgs ::= MESSAGE PO msg PF  {::}  ;

msg ::= cm:c {: System.out.println(c);  message_content+=( c.replace("\"",co))+',' ;:} VG msg 
| 
cm:c {: System.out.println(c);  message_content+=( c.replace("\"",co)) ;:}  ;








