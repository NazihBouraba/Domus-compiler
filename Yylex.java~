/* The following code was generated by JFlex 1.4.3 on 24/11/2020 23:33 */

// Specification JFlex

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 24/11/2020 23:33 from the specification file
 * <tt>jflex.lex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\60\1\61\1\0\2\60\22\0\1\57\1\0\1\62\5\0"+
    "\1\1\1\5\2\0\1\4\1\0\1\66\1\47\12\2\1\64\1\65"+
    "\1\33\1\63\1\46\2\0\1\40\1\56\1\50\1\43\1\42\1\55"+
    "\1\37\1\56\1\53\2\56\1\51\1\41\1\54\1\36\1\34\1\56"+
    "\1\35\1\45\1\52\1\44\5\56\4\0\1\3\1\0\1\14\1\25"+
    "\1\13\1\27\1\11\1\20\1\17\1\23\1\15\1\30\1\56\1\10"+
    "\1\22\1\21\1\7\1\26\1\56\1\16\1\31\1\12\1\24\1\6"+
    "\1\56\1\71\2\56\1\67\1\0\1\70\153\0\1\32\uff16\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\15\3\3\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\3\0\24\3\1\16\6\0\1\6\1\0\1\17\1\20"+
    "\3\0\4\3\1\21\17\3\1\22\7\3\1\0\1\21"+
    "\7\0\4\3\1\23\16\3\1\24\7\3\10\0\1\25"+
    "\12\3\1\26\5\3\1\21\1\3\1\27\5\3\1\30"+
    "\7\0\1\31\1\32\7\3\1\21\3\3\1\33\4\3"+
    "\6\0\6\3\2\32\3\3\1\34\2\3\1\35\6\0"+
    "\5\3\1\36\1\3\1\37\1\3\6\0\4\3\1\0"+
    "\3\3\6\0\4\3\1\0\2\3\1\40\6\0\2\3"+
    "\1\32\2\3\6\0\3\3\2\0\1\41\3\0\3\3"+
    "\4\0\1\42\2\3\7\0\1\3\13\0\1\3\20\0"+
    "\1\43\6\0\1\44\13\0\1\45\7\0\1\46\56\0"+
    "\1\47\12\0\1\50\1\51\2\0\1\52\4\0\1\53"+
    "\1\54\1\55\2\0\1\56\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[428];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\72\0\72\0\350\0\u0122"+
    "\0\u015c\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2"+
    "\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\72\0\u0488"+
    "\0\u04c2\0\72\0\72\0\72\0\72\0\72\0\u04fc\0\u0536"+
    "\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692\0\u06cc\0\u0706"+
    "\0\u0740\0\u077a\0\u07b4\0\u07ee\0\u0828\0\u0862\0\u089c\0\u08d6"+
    "\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6"+
    "\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0488\0\u0488\0\72"+
    "\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u015c"+
    "\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e"+
    "\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4\0\u015c"+
    "\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294"+
    "\0\72\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a"+
    "\0\u1464\0\u149e\0\u14d8\0\u1512\0\u015c\0\u154c\0\u1586\0\u15c0"+
    "\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790"+
    "\0\u17ca\0\u1804\0\u183e\0\u015c\0\u1878\0\u18b2\0\u18ec\0\u1926"+
    "\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6"+
    "\0\u1b30\0\u1b6a\0\u1ba4\0\u015c\0\u1bde\0\u1c18\0\u1c52\0\u1c8c"+
    "\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\u1de8\0\u015c\0\u1e22"+
    "\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1c18\0\u1f44\0\u015c\0\u1f7e"+
    "\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\u015c\0\u20a0\0\u20da\0\u2114"+
    "\0\u214e\0\u2188\0\u21c2\0\u21fc\0\72\0\u2236\0\u2270\0\u22aa"+
    "\0\u22e4\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a"+
    "\0\u24b4\0\u015c\0\u24ee\0\u2528\0\u2562\0\u259c\0\u25d6\0\u2610"+
    "\0\u264a\0\u2684\0\u26be\0\u26f8\0\u2732\0\u276c\0\u27a6\0\u27e0"+
    "\0\u281a\0\u2854\0\u015c\0\u288e\0\u28c8\0\u2902\0\u293c\0\u015c"+
    "\0\u2976\0\u29b0\0\u015c\0\u29ea\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2"+
    "\0\u2b0c\0\u2b46\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e\0\u015c\0\u2c68"+
    "\0\u015c\0\u2ca2\0\u2cdc\0\u2d16\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe"+
    "\0\u2e38\0\u2e72\0\u2eac\0\u2ee6\0\u2f20\0\u2f5a\0\u2f94\0\u2fce"+
    "\0\u3008\0\u3042\0\u307c\0\u30b6\0\u30f0\0\u312a\0\u3164\0\u319e"+
    "\0\u31d8\0\u3212\0\u324c\0\u3286\0\u32c0\0\u015c\0\u32fa\0\u3334"+
    "\0\u336e\0\u33a8\0\u33e2\0\u341c\0\u3456\0\u3490\0\72\0\u34ca"+
    "\0\u3504\0\u353e\0\u3578\0\u35b2\0\u35ec\0\u3626\0\u3660\0\u369a"+
    "\0\u36d4\0\u370e\0\u3748\0\u3782\0\72\0\u37bc\0\u37f6\0\u3830"+
    "\0\u386a\0\u38a4\0\u38de\0\u3918\0\u3952\0\u398c\0\u39c6\0\72"+
    "\0\u3a00\0\u3a3a\0\u3a74\0\u3aae\0\u3ae8\0\u3b22\0\u3b5c\0\u3b96"+
    "\0\u3bd0\0\u3c0a\0\u3c44\0\u3c7e\0\u3cb8\0\u3cf2\0\u3d2c\0\u3d66"+
    "\0\u3da0\0\u3dda\0\u3e14\0\u3e4e\0\u3e88\0\u3ec2\0\u3efc\0\u3f36"+
    "\0\u3f70\0\u3faa\0\u3fe4\0\u401e\0\u4058\0\u4092\0\u40cc\0\u4106"+
    "\0\u4140\0\u417a\0\u41b4\0\u41ee\0\u4228\0\u4262\0\u015c\0\u429c"+
    "\0\u42d6\0\u4310\0\u434a\0\u4384\0\u43be\0\72\0\u43f8\0\u4432"+
    "\0\u446c\0\u44a6\0\u44e0\0\u451a\0\u4554\0\u458e\0\u45c8\0\u4602"+
    "\0\u463c\0\72\0\u4676\0\u46b0\0\u46ea\0\u4724\0\u475e\0\u4798"+
    "\0\u47d2\0\72\0\u480c\0\u4846\0\u4880\0\u48ba\0\u48f4\0\u492e"+
    "\0\u4968\0\u49a2\0\u49dc\0\u4a16\0\u4a50\0\u4a8a\0\u4ac4\0\u4afe"+
    "\0\u4b38\0\u4b72\0\u4bac\0\u4be6\0\u4c20\0\u4c5a\0\u4c94\0\u4cce"+
    "\0\u4d08\0\u4d42\0\u4d7c\0\u4db6\0\u4df0\0\u4e2a\0\u4e64\0\u4e9e"+
    "\0\u4ed8\0\u4f12\0\u4f4c\0\u4f86\0\u4fc0\0\u4ffa\0\u5034\0\u506e"+
    "\0\u50a8\0\u50e2\0\u511c\0\u5156\0\u5190\0\u51ca\0\u5204\0\u523e"+
    "\0\72\0\u5278\0\u52b2\0\u52ec\0\u5326\0\u5360\0\u539a\0\u53d4"+
    "\0\u540e\0\u5448\0\u5482\0\72\0\72\0\u54bc\0\u54f6\0\72"+
    "\0\u5530\0\u556a\0\u55a4\0\u55de\0\72\0\72\0\72\0\u5618"+
    "\0\u5652\0\72\0\u568c\0\u56c6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[428];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\2\11\1\17"+
    "\1\11\1\20\3\11\1\21\1\22\1\11\1\23\1\24"+
    "\1\25\12\11\1\2\1\26\7\11\3\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\11\74\0\1\37"+
    "\1\40\1\41\70\0\1\4\2\0\24\11\2\0\12\11"+
    "\2\0\7\11\12\0\1\11\2\0\1\11\1\4\2\0"+
    "\1\11\1\42\22\11\2\0\12\11\2\0\7\11\12\0"+
    "\1\11\2\0\1\11\1\4\2\0\16\11\1\43\5\11"+
    "\2\0\12\11\2\0\7\11\12\0\1\11\2\0\1\11"+
    "\1\4\2\0\24\11\2\0\12\11\2\0\7\11\12\0"+
    "\1\11\2\0\1\11\1\4\2\0\4\11\1\44\1\45"+
    "\16\11\2\0\12\11\2\0\7\11\12\0\1\46\2\0"+
    "\1\11\1\4\2\0\3\11\1\47\2\11\1\50\15\11"+
    "\2\0\12\11\2\0\7\11\12\0\1\11\2\0\1\11"+
    "\1\4\2\0\15\11\1\51\6\11\2\0\12\11\2\0"+
    "\7\11\12\0\1\11\2\0\1\11\1\4\2\0\2\11"+
    "\1\52\13\11\1\53\4\11\1\54\2\0\12\11\2\0"+
    "\7\11\12\0\1\11\2\0\1\11\1\4\2\0\13\11"+
    "\1\55\10\11\2\0\12\11\2\0\7\11\12\0\1\11"+
    "\2\0\1\11\1\4\2\0\3\11\1\56\2\11\1\57"+
    "\14\11\1\60\2\0\12\11\2\0\7\11\12\0\1\11"+
    "\2\0\1\11\1\4\2\0\1\11\1\61\1\11\1\62"+
    "\20\11\2\0\12\11\2\0\7\11\12\0\1\11\2\0"+
    "\1\11\1\4\2\0\1\11\1\63\6\11\1\64\13\11"+
    "\2\0\12\11\2\0\7\11\12\0\1\11\2\0\1\11"+
    "\1\4\2\0\3\11\1\65\20\11\2\0\12\11\2\0"+
    "\7\11\12\0\1\11\2\0\1\11\1\4\2\0\7\11"+
    "\1\66\14\11\2\0\12\11\2\0\7\11\12\0\1\11"+
    "\12\0\1\67\1\70\112\0\1\71\6\0\1\72\1\0"+
    "\1\73\1\0\1\74\71\0\1\75\22\0\61\76\1\0"+
    "\1\77\7\76\63\0\1\100\10\0\1\37\1\0\1\41"+
    "\71\0\1\41\67\0\1\101\1\102\1\103\67\0\1\11"+
    "\1\4\2\0\2\11\1\104\21\11\2\0\12\11\2\0"+
    "\7\11\12\0\1\11\2\0\1\11\1\4\2\0\1\105"+
    "\23\11\2\0\12\11\2\0\7\11\12\0\1\11\2\0"+
    "\1\11\1\4\2\0\3\11\1\106\2\11\1\107\15\11"+
    "\2\0\12\11\2\0\7\11\12\0\1\11\2\0\1\11"+
    "\1\4\2\0\1\11\1\110\1\111\21\11\2\0\12\11"+
    "\2\0\7\11\12\0\1\11\2\0\1\11\1\4\2\0"+
    "\3\11\1\112\20\11\2\0\12\11\2\0\7\11\12\0"+
    "\1\11\2\0\1\11\1\4\2\0\2\11\1\113\21\11"+
    "\2\0\12\11\2\0\7\11\12\0\1\11\2\0\1\11"+
    "\1\4\2\0\14\11\1\114\2\11\1\115\4\11\2\0"+
    "\12\11\2\0\7\11\12\0\1\11\2\0\1\11\1\4"+
    "\2\0\6\11\1\116\15\11\2\0\12\11\2\0\7\11"+
    "\12\0\1\11\2\0\1\11\1\4\2\0\1\11\1\117"+
    "\1\120\3\11\1\121\15\11\2\0\12\11\2\0\7\11"+
    "\12\0\1\11\2\0\1\11\1\4\2\0\4\11\1\122"+
    "\17\11\2\0\12\11\2\0\7\11\12\0\1\11\2\0"+
    "\1\11\1\4\2\0\23\11\1\123\2\0\12\11\2\0"+
    "\7\11\12\0\1\11\2\0\1\11\1\4\2\0\4\11"+
    "\1\124\17\11\2\0\12\11\2\0\7\11\12\0\1\11"+
    "\2\0\1\11\1\4\2\0\10\11\1\125\2\11\1\126"+
    "\10\11\2\0\12\11\2\0\7\11\12\0\1\11\2\0"+
    "\1\11\1\4\2\0\7\11\1\127\14\11\2\0\12\11"+
    "\2\0\7\11\12\0\1\11\2\0\1\11\1\4\2\0"+
    "\7\11\1\130\14\11\2\0\12\11\2\0\7\11\12\0"+
    "\1\11\2\0\1\11\1\4\2\0\17\11\1\131\4\11"+
    "\2\0\12\11\2\0\7\11\12\0\1\11\2\0\1\11"+
    "\1\4\2\0\23\11\1\132\2\0\12\11\2\0\7\11"+
    "\12\0\1\11\2\0\1\11\1\4\2\0\16\11\1\133"+
    "\5\11\2\0\12\11\2\0\7\11\12\0\1\11\2\0"+
    "\1\11\1\4\2\0\1\11\1\134\22\11\2\0\12\11"+
    "\2\0\7\11\12\0\1\11\2\0\1\11\1\4\2\0"+
    "\12\11\1\135\1\11\1\136\7\11\2\0\12\11\2\0"+
    "\7\11\12\0\1\11\2\0\1\11\1\4\2\0\13\11"+
    "\1\137\10\11\2\0\12\11\2\0\7\11\12\0\1\11"+
    "\11\0\1\140\67\0\1\141\117\0\1\142\76\0\1\143"+
    "\77\0\1\144\55\0\1\145\6\0\1\146\1\0\1\147"+
    "\24\0\61\75\1\0\10\75\2\0\1\101\1\0\1\103"+
    "\71\0\1\103\67\0\1\103\1\0\1\150\67\0\1\11"+
    "\1\4\2\0\3\11\1\151\20\11\2\0\12\11\2\0"+
    "\7\11\12\0\1\11\2\0\1\11\1\4\2\0\3\11"+
    "\1\152\4\11\1\153\13\11\2\0\12\11\2\0\7\11"+
    "\12\0\1\11\2\0\1\11\1\4\2\0\7\11\1\154"+
    "\14\11\2\0\12\11\2\0\7\11\12\0\1\11\2\0"+
    "\1\11\1\4\2\0\4\11\1\155\17\11\2\0\12\11"+
    "\2\0\7\11\12\0\1\11\2\0\1\11\1\4\2\0"+
    "\6\11\1\156\15\11\2\0\12\11\2\0\7\11\12\0"+
    "\1\11\2\0\1\11\1\4\2\0\5\11\1\157\16\11"+
    "\2\0\12\11\2\0\7\11\12\0\1\11\2\0\1\11"+
    "\1\4\2\0\3\11\1\160\20\11\2\0\12\11\2\0"+
    "\7\11\12\0\1\11\2\0\1\11\1\4\2\0\7\11"+
    "\1\161\14\11\2\0\12\11\2\0\7\11\12\0\1\11"+
    "\2\0\1\11\1\4\2\0\2\11\1\162\21\11\2\0"+
    "\12\11\2\0\7\11\12\0\1\11\2\0\1\11\1\4"+
    "\2\0\16\11\1\163\5\11\2\0\12\11\2\0\7\11"+
    "\12\0\1\11\2\0\1\11\1\4\2\0\10\11\1\164"+
    "\13\11\2\0\12\11\2\0\7\11\12\0\1\11\2\0"+
    "\1\11\1\4\2\0\16\11\1\165\5\11\2\0\12\11"+
    "\2\0\7\11\12\0\1\11\2\0\1\11\1\4\2\0"+
    "\10\11\1\166\13\11\2\0\12\11\2\0\7\11\12\0"+
    "\1\11\2\0\1\11\1\4\2\0\10\11\1\167\13\11"+
    "\2\0\12\11\2\0\7\11\12\0\1\11\2\0\1\11"+
    "\1\4\2\0\1\11\1\170\22\11\2\0\12\11\2\0"+
    "\7\11\12\0\1\11\2\0\1\11\1\4\2\0\3\11"+
    "\1\171\20\11\2\0\12\11\2\0\7\11\12\0\1\11"+
    "\2\0\1\11\1\4\2\0\14\11\1\172\7\11\2\0"+
    "\12\11\2\0\7\11\12\0\1\11\2\0\1\11\1\4"+
    "\2\0\3\11\1\173\20\11\2\0\12\11\2\0\7\11"+
    "\12\0\1\11\2\0\1\11\1\4\2\0\4\11\1\174"+
    "\3\11\1\175\13\11\2\0\12\11\2\0\7\11\12\0"+
    "\1\11\2\0\1\11\1\4\2\0\7\11\1\176\14\11"+
    "\2\0\12\11\2\0\7\11\12\0\1\11\2\0\1\11"+
    "\1\4\2\0\23\11\1\177\2\0\12\11\2\0\7\11"+
    "\12\0\1\11\2\0\1\11\1\4\2\0\10\11\1\200"+
    "\13\11\2\0\12\11\2\0\7\11\12\0\1\11\2\0"+
    "\1\11\1\4\2\0\11\11\1\201\12\11\2\0\12\11"+
    "\2\0\7\11\12\0\1\11\2\0\1\11\1\4\2\0"+
    "\7\11\1\202\14\11\2\0\12\11\2\0\7\11\12\0"+
    "\1\11\2\0\1\11\1\4\2\0\7\11\1\110\14\11"+
    "\2\0\12\11\2\0\7\11\12\0\1\11\2\0\1\11"+
    "\1\4\2\0\1\11\1\203\22\11\2\0\12\11\2\0"+
    "\7\11\12\0\1\11\15\0\1\204\112\0\1\205\103\0"+
    "\1\206\63\0\1\207\64\0\1\210\76\0\1\211\77\0"+
    "\1\212\23\0\1\150\1\0\1\213\67\0\1\11\1\4"+
    "\2\0\4\11\1\214\17\11\2\0\12\11\2\0\7\11"+
    "\12\0\1\11\2\0\1\11\1\4\2\0\10\11\1\215"+
    "\13\11\2\0\12\11\2\0\7\11\12\0\1\11\2\0"+
    "\1\11\1\4\2\0\7\11\1\216\14\11\2\0\12\11"+
    "\2\0\7\11\12\0\1\11\2\0\1\11\1\4\2\0"+
    "\13\11\1\217\10\11\2\0\12\11\2\0\7\11\12\0"+
    "\1\11\2\0\1\11\1\4\2\0\7\11\1\220\14\11"+
    "\2\0\12\11\2\0\7\11\12\0\1\11\2\0\1\11"+
    "\1\4\2\0\16\11\1\221\5\11\2\0\12\11\2\0"+
    "\7\11\12\0\1\11\2\0\1\11\1\4\2\0\5\11"+
    "\1\222\12\11\1\223\3\11\2\0\12\11\2\0\7\11"+
    "\12\0\1\11\2\0\1\11\1\4\2\0\23\11\1\224"+
    "\2\0\12\11\2\0\7\11\12\0\1\11\2\0\1\11"+
    "\1\4\2\0\3\11\1\225\20\11\2\0\12\11\2\0"+
    "\7\11\12\0\1\11\2\0\1\11\1\4\2\0\12\11"+
    "\1\226\11\11\2\0\12\11\2\0\7\11\12\0\1\11"+
    "\2\0\1\11\1\4\2\0\23\11\1\227\2\0\12\11"+
    "\2\0\7\11\12\0\1\11\2\0\1\11\1\4\2\0"+
    "\14\11\1\230\7\11\2\0\12\11\2\0\7\11\12\0"+
    "\1\11\2\0\1\11\1\4\2\0\14\11\1\231\7\11"+
    "\2\0\12\11\2\0\7\11\12\0\1\11\2\0\1\11"+
    "\1\4\2\0\3\11\1\232\20\11\2\0\12\11\2\0"+
    "\7\11\12\0\1\11\2\0\1\11\1\4\2\0\5\11"+
    "\1\233\16\11\2\0\12\11\2\0\7\11\12\0\1\11"+
    "\2\0\1\11\1\4\2\0\10\11\1\234\13\11\2\0"+
    "\12\11\2\0\7\11\12\0\1\11\2\0\1\11\1\4"+
    "\2\0\3\11\1\235\20\11\1\141\1\0\12\11\2\0"+
    "\7\11\12\0\1\11\2\0\1\11\1\4\2\0\4\11"+
    "\1\236\17\11\2\0\12\11\2\0\7\11\12\0\1\11"+
    "\2\0\1\11\1\4\2\0\3\11\1\237\20\11\2\0"+
    "\12\11\2\0\7\11\12\0\1\11\2\0\1\11\1\4"+
    "\2\0\2\11\1\240\21\11\2\0\12\11\2\0\7\11"+
    "\12\0\1\11\2\0\1\11\1\4\2\0\6\11\1\241"+
    "\15\11\2\0\12\11\2\0\7\11\12\0\1\11\2\0"+
    "\1\11\1\4\2\0\4\11\1\242\17\11\2\0\12\11"+
    "\2\0\7\11\12\0\1\11\2\0\1\11\1\4\2\0"+
    "\10\11\1\243\13\11\2\0\12\11\2\0\7\11\12\0"+
    "\1\11\2\0\1\11\1\4\2\0\13\11\1\244\10\11"+
    "\2\0\12\11\2\0\7\11\12\0\1\11\2\0\1\11"+
    "\1\4\2\0\13\11\1\245\10\11\2\0\12\11\2\0"+
    "\7\11\12\0\1\11\21\0\1\246\107\0\1\247\103\0"+
    "\1\250\74\0\1\251\53\0\1\252\103\0\1\253\63\0"+
    "\1\254\31\0\1\213\2\0\1\255\66\0\1\11\1\4"+
    "\2\0\4\11\1\110\17\11\2\0\12\11\2\0\7\11"+
    "\12\0\1\11\2\0\1\11\1\4\2\0\10\11\1\256"+
    "\13\11\2\0\12\11\2\0\7\11\12\0\1\11\2\0"+
    "\1\11\1\4\2\0\4\11\1\110\14\11\1\257\2\11"+
    "\2\0\12\11\2\0\7\11\12\0\1\11\2\0\1\11"+
    "\1\4\2\0\10\11\1\260\13\11\2\0\12\11\2\0"+
    "\7\11\12\0\1\11\2\0\1\11\1\4\2\0\4\11"+
    "\1\261\17\11\2\0\12\11\2\0\7\11\12\0\1\11"+
    "\2\0\1\11\1\4\2\0\1\11\1\262\22\11\2\0"+
    "\12\11\2\0\7\11\12\0\1\11\2\0\1\11\1\4"+
    "\2\0\15\11\1\263\6\11\2\0\12\11\2\0\7\11"+
    "\12\0\1\11\2\0\1\11\1\4\2\0\3\11\1\264"+
    "\20\11\2\0\12\11\2\0\7\11\12\0\1\11\2\0"+
    "\1\11\1\4\2\0\4\11\1\265\17\11\2\0\12\11"+
    "\2\0\7\11\12\0\1\11\2\0\1\11\1\4\2\0"+
    "\12\11\1\260\11\11\2\0\12\11\2\0\7\11\12\0"+
    "\1\11\2\0\1\11\1\4\2\0\3\11\1\266\20\11"+
    "\1\141\1\0\12\11\2\0\7\11\12\0\1\11\2\0"+
    "\1\11\1\4\2\0\3\11\1\214\20\11\2\0\12\11"+
    "\2\0\7\11\12\0\1\11\2\0\1\11\1\267\2\0"+
    "\24\11\2\0\12\11\2\0\7\11\12\0\1\11\2\0"+
    "\1\11\1\4\2\0\7\11\1\270\14\11\2\0\12\11"+
    "\2\0\7\11\12\0\1\11\2\0\1\11\1\4\2\0"+
    "\10\11\1\271\13\11\2\0\12\11\2\0\7\11\12\0"+
    "\1\11\2\0\1\11\1\4\2\0\10\11\1\231\13\11"+
    "\2\0\12\11\2\0\7\11\12\0\1\11\2\0\1\11"+
    "\1\4\2\0\3\11\1\272\20\11\2\0\12\11\2\0"+
    "\7\11\12\0\1\11\2\0\1\11\1\4\2\0\11\11"+
    "\1\273\12\11\2\0\12\11\2\0\7\11\12\0\1\11"+
    "\2\0\1\11\1\4\2\0\1\11\1\274\22\11\2\0"+
    "\12\11\2\0\7\11\12\0\1\11\2\0\1\11\1\4"+
    "\2\0\6\11\1\275\15\11\2\0\12\11\2\0\7\11"+
    "\12\0\1\11\2\0\1\11\1\4\2\0\7\11\1\276"+
    "\14\11\2\0\12\11\2\0\7\11\12\0\1\11\12\0"+
    "\1\141\114\0\1\277\74\0\1\300\71\0\1\301\70\0"+
    "\1\302\103\0\1\303\74\0\1\304\17\0\1\11\1\305"+
    "\2\0\24\11\2\0\12\11\2\0\7\11\12\0\1\11"+
    "\2\0\1\11\1\4\2\0\10\11\1\306\13\11\2\0"+
    "\12\11\2\0\7\11\12\0\1\11\2\0\1\11\1\4"+
    "\2\0\6\11\1\307\15\11\2\0\12\11\2\0\7\11"+
    "\12\0\1\11\2\0\1\11\1\4\2\0\3\11\1\310"+
    "\20\11\2\0\12\11\2\0\7\11\12\0\1\11\2\0"+
    "\1\11\1\4\2\0\14\11\1\311\7\11\2\0\12\11"+
    "\2\0\7\11\12\0\1\11\2\0\1\11\1\4\2\0"+
    "\1\11\1\312\22\11\2\0\12\11\2\0\7\11\12\0"+
    "\1\11\2\0\1\11\1\4\2\0\10\11\1\313\13\11"+
    "\2\0\12\11\2\0\7\11\12\0\1\11\2\0\1\11"+
    "\1\4\2\0\4\11\1\240\17\11\2\0\12\11\2\0"+
    "\7\11\12\0\1\11\2\0\1\11\1\4\2\0\10\11"+
    "\1\314\13\11\2\0\12\11\2\0\7\11\12\0\1\11"+
    "\3\0\1\4\2\0\6\11\1\315\15\11\2\0\12\11"+
    "\2\0\7\11\12\0\1\11\2\0\1\11\1\4\2\0"+
    "\3\11\1\316\20\11\2\0\12\11\2\0\7\11\12\0"+
    "\1\11\2\0\1\11\1\4\2\0\16\11\1\317\5\11"+
    "\2\0\12\11\2\0\7\11\12\0\1\11\2\0\1\11"+
    "\1\4\2\0\3\11\1\320\20\11\2\0\12\11\2\0"+
    "\7\11\12\0\1\11\2\0\1\11\1\4\2\0\16\11"+
    "\1\321\5\11\2\0\12\11\2\0\7\11\12\0\1\11"+
    "\2\0\1\11\1\4\2\0\14\11\1\322\7\11\2\0"+
    "\12\11\2\0\7\11\12\0\1\11\2\0\1\11\1\4"+
    "\2\0\10\11\1\323\13\11\2\0\12\11\2\0\7\11"+
    "\12\0\1\11\40\0\1\324\66\0\1\325\71\0\1\326"+
    "\71\0\1\327\74\0\1\330\71\0\1\331\34\0\1\4"+
    "\2\0\20\11\1\332\3\11\2\0\12\11\2\0\7\11"+
    "\12\0\1\11\2\0\1\11\1\4\2\0\3\11\1\313"+
    "\20\11\2\0\12\11\2\0\7\11\12\0\1\11\2\0"+
    "\1\11\1\4\2\0\11\11\1\231\12\11\2\0\12\11"+
    "\2\0\7\11\12\0\1\11\2\0\1\11\1\4\2\0"+
    "\10\11\1\333\13\11\2\0\12\11\2\0\7\11\12\0"+
    "\1\11\2\0\1\11\1\4\2\0\14\11\1\334\7\11"+
    "\2\0\12\11\2\0\7\11\12\0\1\11\2\0\1\11"+
    "\1\4\2\0\13\11\1\240\10\11\2\0\12\11\2\0"+
    "\7\11\12\0\1\11\2\0\1\11\1\335\2\0\24\11"+
    "\2\0\12\11\2\0\7\11\12\0\1\11\2\0\1\11"+
    "\1\4\2\0\20\11\1\336\3\11\2\0\12\11\2\0"+
    "\7\11\12\0\1\11\2\0\1\11\1\4\2\0\10\11"+
    "\1\337\13\11\2\0\12\11\2\0\7\11\12\0\1\11"+
    "\2\0\1\11\1\4\2\0\20\11\1\340\3\11\2\0"+
    "\12\11\2\0\7\11\12\0\1\11\2\0\1\11\1\4"+
    "\2\0\4\11\1\341\17\11\2\0\12\11\2\0\7\11"+
    "\12\0\1\11\2\0\1\11\1\4\2\0\14\11\1\342"+
    "\7\11\2\0\12\11\2\0\7\11\12\0\1\11\41\0"+
    "\1\343\70\0\1\344\104\0\1\345\56\0\1\346\66\0"+
    "\1\347\71\0\1\350\36\0\1\11\1\4\2\0\6\11"+
    "\1\351\15\11\2\0\12\11\2\0\7\11\12\0\1\11"+
    "\2\0\1\11\1\352\2\0\24\11\2\0\12\11\2\0"+
    "\7\11\12\0\1\11\2\0\1\11\1\4\2\0\6\11"+
    "\1\353\15\11\2\0\12\11\2\0\7\11\12\0\1\11"+
    "\3\0\1\4\2\0\3\11\1\354\14\11\1\332\3\11"+
    "\1\355\1\0\12\11\2\0\7\11\12\0\1\11\2\0"+
    "\1\11\1\4\2\0\20\11\1\356\3\11\2\0\12\11"+
    "\2\0\7\11\12\0\1\11\2\0\1\11\1\4\2\0"+
    "\4\11\1\357\17\11\2\0\12\11\2\0\7\11\12\0"+
    "\1\11\2\0\1\11\1\4\2\0\3\11\1\360\20\11"+
    "\2\0\12\11\2\0\7\11\12\0\1\11\41\0\1\361"+
    "\102\0\1\362\55\0\1\363\74\0\1\364\70\0\1\365"+
    "\104\0\1\366\20\0\1\11\1\4\2\0\10\11\1\367"+
    "\13\11\2\0\12\11\2\0\7\11\12\0\1\11\3\0"+
    "\1\4\2\0\23\11\1\370\2\0\12\11\2\0\7\11"+
    "\12\0\1\11\2\0\1\11\1\4\2\0\13\11\1\371"+
    "\10\11\2\0\12\11\2\0\7\11\12\0\1\11\2\0"+
    "\1\11\1\4\2\0\5\11\1\372\16\11\2\0\12\11"+
    "\2\0\7\11\12\0\1\11\13\0\1\373\60\0\1\11"+
    "\1\4\2\0\6\11\1\374\15\11\2\0\12\11\2\0"+
    "\7\11\12\0\1\11\2\0\1\11\1\4\2\0\3\11"+
    "\1\375\20\11\2\0\12\11\2\0\7\11\12\0\1\11"+
    "\2\0\1\11\1\4\2\0\10\11\1\376\13\11\2\0"+
    "\12\11\2\0\7\11\12\0\1\11\42\0\1\377\102\0"+
    "\1\u0100\75\0\1\u0101\53\0\1\u0102\102\0\1\u0103\55\0"+
    "\1\u0104\35\0\1\11\1\4\2\0\4\11\1\u0105\17\11"+
    "\2\0\12\11\2\0\7\11\12\0\1\11\2\0\1\11"+
    "\1\4\2\0\5\11\1\u0106\16\11\2\0\12\11\2\0"+
    "\7\11\12\0\1\11\2\0\1\11\1\4\2\0\21\11"+
    "\1\240\2\11\2\0\12\11\2\0\7\11\12\0\1\11"+
    "\2\0\1\11\1\4\2\0\1\11\1\313\22\11\2\0"+
    "\12\11\2\0\7\11\12\0\1\11\7\0\1\u0107\64\0"+
    "\1\11\1\4\2\0\10\11\1\u0108\13\11\2\0\12\11"+
    "\2\0\7\11\12\0\1\11\2\0\1\11\1\4\2\0"+
    "\16\11\1\u0109\5\11\2\0\12\11\2\0\7\11\12\0"+
    "\1\11\3\0\1\u010a\124\0\1\u010b\35\0\2\u010c\2\0"+
    "\24\u010c\2\0\12\u010c\2\0\7\u010c\12\0\1\u010c\42\0"+
    "\1\u010d\102\0\1\u010e\75\0\1\u010f\14\0\1\11\1\4"+
    "\2\0\7\11\1\u0110\14\11\2\0\12\11\2\0\7\11"+
    "\12\0\1\11\2\0\1\11\1\4\2\0\3\11\1\u0111"+
    "\20\11\2\0\12\11\2\0\7\11\12\0\1\11\2\0"+
    "\1\11\1\4\2\0\3\11\1\u0112\20\11\2\0\12\11"+
    "\2\0\7\11\12\0\1\11\2\0\1\11\1\4\2\0"+
    "\10\11\1\272\13\11\2\0\12\11\2\0\7\11\12\0"+
    "\1\11\43\0\1\u0113\102\0\1\u0114\17\0\2\u010c\2\0"+
    "\24\u010c\2\0\12\u010c\1\u0115\1\0\7\u010c\12\0\1\u010c"+
    "\3\0\1\u0116\124\0\1\u0117\35\0\2\u0118\2\0\24\u0118"+
    "\2\0\12\u0118\2\0\7\u0118\12\0\1\u0118\2\0\1\11"+
    "\1\4\2\0\3\11\1\u0119\20\11\2\0\12\11\2\0"+
    "\7\11\12\0\1\11\2\0\1\11\1\4\2\0\13\11"+
    "\1\u011a\10\11\2\0\12\11\2\0\7\11\12\0\1\11"+
    "\2\0\1\11\1\4\2\0\7\11\1\u011b\14\11\2\0"+
    "\12\11\2\0\7\11\12\0\1\11\36\0\1\u011c\36\0"+
    "\1\u011d\131\0\1\u011e\102\0\1\u011f\17\0\2\u0118\2\0"+
    "\24\u0118\2\0\12\u0118\1\u0120\1\0\7\u0118\12\0\1\u0118"+
    "\2\0\1\11\1\4\2\0\2\11\1\313\21\11\2\0"+
    "\12\11\2\0\7\11\12\0\1\11\2\0\1\11\1\4"+
    "\2\0\6\11\1\u0121\15\11\2\0\12\11\2\0\7\11"+
    "\12\0\1\11\2\0\1\11\1\4\2\0\2\11\1\u0122"+
    "\21\11\2\0\12\11\2\0\7\11\12\0\1\11\41\0"+
    "\1\u0123\70\0\1\u0124\4\0\1\u0125\2\0\1\u0126\2\0"+
    "\1\u0127\54\0\1\u0128\36\0\1\u0129\70\0\1\11\1\4"+
    "\2\0\10\11\1\u012a\13\11\2\0\12\11\2\0\7\11"+
    "\12\0\1\11\1\0\1\u012b\1\11\1\4\2\0\24\11"+
    "\2\0\12\11\2\0\7\11\12\0\1\11\44\0\1\u012c"+
    "\61\0\1\u012d\105\0\1\u012e\57\0\1\u012f\107\0\1\u0130"+
    "\56\0\1\u0131\70\0\1\u0132\4\0\1\u0133\2\0\1\u0134"+
    "\2\0\1\u0135\20\0\1\11\1\4\2\0\7\11\1\u0136"+
    "\14\11\2\0\12\11\2\0\7\11\12\0\1\11\6\0"+
    "\1\u0137\1\0\1\u0138\1\0\1\u0139\1\u013a\7\0\1\u013b"+
    "\2\0\1\u013c\110\0\1\u013d\60\0\1\u013e\77\0\1\u013f"+
    "\70\0\1\u0140\102\0\1\u0141\63\0\1\u0142\61\0\1\u0143"+
    "\105\0\1\u0144\57\0\1\u0145\107\0\1\u0146\17\0\1\11"+
    "\1\4\2\0\1\11\1\u0147\22\11\2\0\12\11\2\0"+
    "\7\11\12\0\1\11\15\0\1\u0148\70\0\1\u0149\63\0"+
    "\1\u014a\77\0\1\u014b\72\0\1\u014c\63\0\1\u014d\130\0"+
    "\1\u014e\63\0\1\u014f\105\0\1\u0150\56\0\1\u0151\72\0"+
    "\1\u0152\74\0\1\u0153\60\0\1\u0154\77\0\1\u0155\70\0"+
    "\1\u0156\102\0\1\u0157\46\0\1\u0158\50\0\1\u0159\70\0"+
    "\1\u015a\104\0\1\u015b\71\0\1\u015c\67\0\1\u015d\110\0"+
    "\1\u015e\74\0\1\u015f\71\0\1\u0160\66\0\1\u0161\102\0"+
    "\1\u0162\63\0\1\u0163\105\0\1\u0164\56\0\1\u0165\72\0"+
    "\1\u0166\40\0\1\u0167\71\0\1\u0168\71\0\1\u0169\75\0"+
    "\1\u014a\66\0\1\u016a\121\0\1\u016b\64\0\1\u016c\110\0"+
    "\1\u016d\72\0\1\u016e\51\0\1\u016f\74\0\1\u0170\71\0"+
    "\1\u0171\66\0\1\u0172\43\0\1\u0173\65\0\1\u0174\100\0"+
    "\1\u0175\73\0\1\u0176\130\0\1\u0177\71\0\1\u0178\61\0"+
    "\1\u0179\66\0\1\u017a\73\0\1\u017b\64\0\1\u017c\110\0"+
    "\1\u017d\72\0\1\u017e\17\0\1\u017f\74\0\1\u0180\1\0"+
    "\1\u0181\76\0\1\u0182\71\0\1\u0183\125\0\1\u0184\73\0"+
    "\1\u0185\60\0\1\u0186\77\0\1\u0187\74\0\1\u0188\71\0"+
    "\1\u0189\61\0\1\u018a\66\0\1\u018b\57\0\1\u018c\57\0"+
    "\1\u018d\72\0\1\u018e\65\0\1\u018f\70\0\1\u014a\126\0"+
    "\1\u0190\72\0\1\u0191\70\0\1\u0192\66\0\1\u0193\100\0"+
    "\1\u0194\73\0\1\u0195\60\0\1\u0196\77\0\1\u0197\37\0"+
    "\1\u0198\70\0\1\u0199\75\0\1\u019a\66\0\1\u019b\121\0"+
    "\1\u019c\71\0\1\u019d\70\0\1\u019e\71\0\1\u019f\72\0"+
    "\1\u01a0\70\0\1\u01a1\66\0\1\u01a2\36\0\1\u01a3\113\0"+
    "\1\u01a4\57\0\1\u019b\63\0\1\u014a\126\0\1\u01a5\71\0"+
    "\1\u01a6\71\0\1\u01a7\70\0\1\u01a8\54\0\1\u014a\72\0"+
    "\1\u01a9\106\0\1\u01aa\34\0\1\u01ab\70\0\1\u01ac\71\0"+
    "\1\u019b\61\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22272];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\2\11\20\1\1\11\2\1\5\11"+
    "\3\0\25\1\6\0\1\1\1\0\1\1\1\11\3\0"+
    "\34\1\1\0\1\11\7\0\33\1\10\0\32\1\7\0"+
    "\1\11\21\1\6\0\17\1\6\0\11\1\6\0\4\1"+
    "\1\0\3\1\6\0\4\1\1\0\3\1\6\0\2\1"+
    "\1\11\2\1\6\0\3\1\2\0\1\11\3\0\3\1"+
    "\4\0\1\11\2\1\7\0\1\1\13\0\1\1\20\0"+
    "\1\1\6\0\1\11\13\0\1\11\7\0\1\11\56\0"+
    "\1\11\12\0\2\11\2\0\1\11\4\0\3\11\2\0"+
    "\1\11\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[428];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public int getYyLine(){
		return yyline+1;
	}
	public int getYyColumn(){
		return yycolumn+1;
	}
	public String getYyText(){
		return yytext();
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { return new Symbol(sym.PF);
          }
        case 47: break;
        case 26: 
          { return new Symbol(sym.ACTION, new String(yytext()));
          }
        case 48: break;
        case 29: 
          { return new Symbol(sym.DEFINIR, new String(yytext()));
          }
        case 49: break;
        case 14: 
          { return new Symbol(sym.SI, new String(yytext()));
          }
        case 50: break;
        case 10: 
          { return new Symbol(sym.PV);
          }
        case 51: break;
        case 1: 
          { System.out.println(" Erreur ligne "+(yyline+1)+" colonne "+(yycolumn+1)+" : "+yytext()+" => caractÃšre inconnu ! ");
          }
        case 52: break;
        case 33: 
          { return new Symbol(sym.DSCO);
          }
        case 53: break;
        case 41: 
          { return new Symbol(sym.DCO);
          }
        case 54: break;
        case 15: 
          { return new Symbol(sym.cm);
          }
        case 55: break;
        case 34: 
          { return new Symbol(sym.DSCF);
          }
        case 56: break;
        case 45: 
          { return new Symbol(sym.DCF);
          }
        case 57: break;
        case 19: 
          { return new Symbol(sym.ETAT, new String(yytext()));
          }
        case 58: break;
        case 25: 
          { return new Symbol(sym.DATE);
          }
        case 59: break;
        case 4: 
          { return new Symbol(sym.VG);
          }
        case 60: break;
        case 24: 
          { return new Symbol(sym.SINON, new String(yytext()));
          }
        case 61: break;
        case 11: 
          { return new Symbol(sym.PT);
          }
        case 62: break;
        case 31: 
          { return new Symbol(sym.POURTOUT, new String(yytext()));
          }
        case 63: break;
        case 36: 
          { return new Symbol(sym.PDO);
          }
        case 64: break;
        case 38: 
          { return new Symbol(sym.PDF);
          }
        case 65: break;
        case 40: 
          { return new Symbol(sym.DAO);
          }
        case 66: break;
        case 28: 
          { return new Symbol(sym.MESSAGE, new String(yytext()));
          }
        case 67: break;
        case 30: 
          { return new Symbol(sym.ASSOCIER, new String(yytext()));
          }
        case 68: break;
        case 32: 
          { return new Symbol(sym.PROGRAMMER, new String(yytext()));
          }
        case 69: break;
        case 44: 
          { return new Symbol(sym.DAF);
          }
        case 70: break;
        case 20: 
          { return new Symbol(sym.FAIT, new String(yytext()));
          }
        case 71: break;
        case 21: 
          { return new Symbol(sym.APPAREIL_TYPE, new String(yytext()));
          }
        case 72: break;
        case 8: 
          { return new Symbol(sym.EGAL);
          }
        case 73: break;
        case 17: 
          { return new Symbol(sym.ETATS, new String(yytext()));
          }
        case 74: break;
        case 18: 
          { return new Symbol(sym.FSI, new String(yytext()));
          }
        case 75: break;
        case 43: 
          { return new Symbol(sym.DIO);
          }
        case 76: break;
        case 46: 
          { return new Symbol(sym.DIF);
          }
        case 77: break;
        case 16: 
          { return new Symbol(sym.DEGAL);
          }
        case 78: break;
        case 12: 
          { return new Symbol(sym.AO);
          }
        case 79: break;
        case 27: 
          { return new Symbol(sym.INTERFACE_TYPE, new String(yytext()));
          }
        case 80: break;
        case 13: 
          { return new Symbol(sym.AF);
          }
        case 81: break;
        case 39: 
          { return new Symbol(sym.DSO);
          }
        case 82: break;
        case 35: 
          { return new Symbol(sym.EXECUTER_SCENARIO, new String(yytext()));
          }
        case 83: break;
        case 42: 
          { return new Symbol(sym.DSF);
          }
        case 84: break;
        case 22: 
          { return new Symbol(sym.ALORS, new String(yytext()));
          }
        case 85: break;
        case 9: 
          { return new Symbol(sym.DP);
          }
        case 86: break;
        case 2: 
          { return new Symbol(sym.PO);
          }
        case 87: break;
        case 37: 
          { return new Symbol(sym.AUTRE_APPAREIL, new String(yytext()));
          }
        case 88: break;
        case 23: 
          { return new Symbol(sym.FAIRE, new String(yytext()));
          }
        case 89: break;
        case 6: 
          { 
          }
        case 90: break;
        case 3: 
          { return new Symbol(sym.nom, new String(yytext()));
          }
        case 91: break;
        case 7: 
          { return new Symbol(sym.COTE);
          }
        case 92: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
