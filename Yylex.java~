/* The following code was generated by JFlex 1.4.3 on 24/11/2020 15:28 */

// Specification JFlex

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 24/11/2020 15:28 from the specification file
 * <tt>jflex.lex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\60\1\61\1\0\2\60\22\0\1\33\1\0\1\62\5\0"+
    "\1\1\1\5\2\0\1\4\1\0\1\66\1\50\12\2\1\64\1\65"+
    "\1\34\1\63\1\47\2\0\1\41\1\57\1\51\1\44\1\43\1\56"+
    "\1\40\1\57\1\54\2\57\1\52\1\42\1\55\1\37\1\35\1\57"+
    "\1\36\1\46\1\53\1\45\5\57\4\0\1\3\1\0\1\21\1\31"+
    "\1\15\1\6\1\7\1\10\1\24\1\30\1\11\2\57\1\27\1\25"+
    "\1\12\1\22\1\23\1\57\1\13\1\20\1\17\1\16\1\26\1\57"+
    "\1\14\2\57\1\67\1\0\1\70\153\0\1\32\uff16\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\14\3\1\1"+
    "\1\6\2\1\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\4\0\13\3\1\16\11\3\6\0\1\6\1\0"+
    "\1\17\1\20\1\3\3\0\3\3\1\21\5\3\1\22"+
    "\22\3\1\23\10\0\4\3\1\24\3\3\1\25\22\3"+
    "\10\0\6\3\1\26\6\3\1\27\3\3\1\30\7\3"+
    "\1\31\7\0\1\32\4\3\1\21\7\3\1\23\3\3"+
    "\1\33\6\0\1\34\3\3\1\0\4\3\1\21\2\3"+
    "\1\35\6\0\1\3\1\0\4\3\1\36\6\0\1\3"+
    "\1\0\4\3\7\0\1\3\1\0\4\3\7\0\1\3"+
    "\1\0\3\3\1\21\6\0\1\3\1\0\2\3\2\0"+
    "\1\37\3\0\1\3\1\0\2\3\4\0\1\40\3\3"+
    "\7\0\1\3\13\0\1\3\15\0\1\3\3\0\1\41"+
    "\12\0\1\42\5\0\1\43\41\0\1\44\7\0\1\45"+
    "\1\46\2\0\1\47\2\0\1\50\1\51\1\52\1\0"+
    "\1\53";

  private static int [] zzUnpackAction() {
    int [] result = new int[397];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\71\0\71\0\344\0\u011d"+
    "\0\u0156\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5"+
    "\0\u031e\0\u0357\0\u0390\0\71\0\u03c9\0\u0402\0\u043b\0\u0474"+
    "\0\71\0\71\0\71\0\71\0\71\0\u04ad\0\u04e6\0\u051f"+
    "\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675\0\u06ae\0\u06e7"+
    "\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804\0\u083d\0\u0876\0\u08af"+
    "\0\u08e8\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77"+
    "\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u043b\0\u043b\0\71"+
    "\0\71\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\253"+
    "\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\253\0\u0e40\0\u0e79"+
    "\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041"+
    "\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209"+
    "\0\71\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398"+
    "\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\253\0\u14ee\0\u1527"+
    "\0\u1560\0\253\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6"+
    "\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e"+
    "\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d\0\u1a46"+
    "\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e"+
    "\0\u1c47\0\u1c80\0\253\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d"+
    "\0\u1dd6\0\253\0\u1e0f\0\u1e48\0\u1e81\0\253\0\u1eba\0\u1ef3"+
    "\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\253\0\u2049\0\u2082"+
    "\0\u20bb\0\u20f4\0\u212d\0\u2166\0\u219f\0\71\0\u21d8\0\u2211"+
    "\0\u224a\0\u2283\0\u22bc\0\u22f5\0\u232e\0\u2367\0\u23a0\0\u23d9"+
    "\0\u2412\0\u244b\0\253\0\u2484\0\u24bd\0\u24f6\0\253\0\u252f"+
    "\0\u2568\0\u25a1\0\u25da\0\u2613\0\u264c\0\253\0\u2685\0\u26be"+
    "\0\u26f7\0\u2730\0\u2769\0\u27a2\0\u27db\0\u2814\0\u284d\0\u2886"+
    "\0\u28bf\0\253\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc\0\u2a15"+
    "\0\u2a4e\0\u2a87\0\u2ac0\0\u2af9\0\u2b32\0\u2b6b\0\253\0\u2ba4"+
    "\0\u2bdd\0\u2c16\0\u2c4f\0\u2c88\0\u2cc1\0\u2cfa\0\u2d33\0\u2d6c"+
    "\0\u2da5\0\u2dde\0\u2e17\0\u2e50\0\u2e89\0\u2ec2\0\u2efb\0\u2f34"+
    "\0\u2f6d\0\u2fa6\0\u2fdf\0\u3018\0\u3051\0\u308a\0\u30c3\0\u30fc"+
    "\0\u3135\0\u316e\0\u31a7\0\u31e0\0\u3219\0\u3252\0\u328b\0\u32c4"+
    "\0\u32fd\0\u3336\0\u336f\0\u33a8\0\71\0\u33e1\0\u341a\0\u3453"+
    "\0\u348c\0\u34c5\0\u34fe\0\u3537\0\u3570\0\u35a9\0\u35e2\0\u361b"+
    "\0\u3654\0\71\0\u368d\0\u36c6\0\u36ff\0\u3738\0\u3771\0\u37aa"+
    "\0\u37e3\0\u381c\0\u3855\0\u388e\0\u38c7\0\71\0\u3900\0\u3939"+
    "\0\u3972\0\u39ab\0\u39e4\0\u3a1d\0\u3a56\0\u3a8f\0\u3ac8\0\u3b01"+
    "\0\u3b3a\0\u3b73\0\u3bac\0\u3be5\0\u3c1e\0\u3c57\0\u3c90\0\u3cc9"+
    "\0\u3d02\0\u3d3b\0\u3d74\0\u3dad\0\u3de6\0\u3e1f\0\u3e58\0\u3e91"+
    "\0\u3eca\0\u3f03\0\u3f3c\0\u3f75\0\u3fae\0\u3fe7\0\u4020\0\u4059"+
    "\0\u4092\0\u40cb\0\u4104\0\u413d\0\u4176\0\u41af\0\71\0\u41e8"+
    "\0\u4221\0\u425a\0\u4293\0\u42cc\0\u4305\0\u433e\0\u4377\0\u43b0"+
    "\0\u43e9\0\71\0\u4422\0\u445b\0\u4494\0\u44cd\0\u4506\0\71"+
    "\0\u453f\0\u4578\0\u45b1\0\u45ea\0\u4623\0\u465c\0\u4695\0\u46ce"+
    "\0\u4707\0\u4740\0\u4779\0\u47b2\0\u47eb\0\u4824\0\u485d\0\u4896"+
    "\0\u48cf\0\u4908\0\u4941\0\u497a\0\u49b3\0\u49ec\0\u4a25\0\u4a5e"+
    "\0\u4a97\0\u4ad0\0\u4b09\0\u4b42\0\u4b7b\0\u4bb4\0\u4bed\0\u4c26"+
    "\0\u4c5f\0\71\0\u4c98\0\u4cd1\0\u4d0a\0\u4d43\0\u4d7c\0\u4db5"+
    "\0\u4dee\0\71\0\71\0\u4e27\0\u4e60\0\71\0\u4e99\0\u4ed2"+
    "\0\71\0\71\0\71\0\u4f0b\0\71";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[397];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\3\4\1\13\1\4\1\14\1\15\1\16\1\17"+
    "\1\20\1\4\1\21\1\22\3\4\1\23\1\24\1\25"+
    "\12\4\1\2\1\26\7\4\2\24\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\73\0\1\36\1\37\1\40"+
    "\1\0\24\41\3\0\12\41\2\0\7\41\13\0\2\4"+
    "\2\0\24\4\3\0\12\4\2\0\7\4\13\0\2\4"+
    "\2\0\1\4\1\42\22\4\3\0\12\4\2\0\7\4"+
    "\13\0\2\4\2\0\6\4\1\43\1\44\1\4\1\45"+
    "\12\4\3\0\12\4\2\0\7\4\13\0\2\4\2\0"+
    "\1\4\1\46\10\4\1\47\1\50\10\4\3\0\12\4"+
    "\2\0\7\4\13\0\2\4\2\0\4\4\1\51\17\4"+
    "\3\0\12\4\2\0\7\4\13\0\2\4\2\0\22\4"+
    "\1\52\1\4\3\0\12\4\2\0\7\4\13\0\2\4"+
    "\2\0\1\4\1\53\11\4\1\54\10\4\3\0\12\4"+
    "\2\0\7\4\13\0\2\4\2\0\3\4\1\55\20\4"+
    "\3\0\12\4\2\0\7\4\13\0\2\4\2\0\10\4"+
    "\1\56\1\4\1\57\6\4\1\60\2\4\3\0\12\4"+
    "\2\0\7\4\13\0\2\4\2\0\10\4\1\61\13\4"+
    "\3\0\12\4\2\0\7\4\13\0\2\4\2\0\5\4"+
    "\1\62\6\4\1\63\7\4\3\0\12\4\2\0\7\4"+
    "\13\0\2\4\2\0\1\4\1\64\12\4\1\65\7\4"+
    "\3\0\12\4\2\0\7\4\13\0\2\4\2\0\14\4"+
    "\1\66\7\4\3\0\12\4\2\0\7\4\26\0\1\67"+
    "\1\0\1\70\106\0\1\71\6\0\1\72\1\0\1\73"+
    "\1\0\1\74\70\0\1\75\20\0\61\76\1\0\1\77"+
    "\6\76\63\0\1\100\7\0\1\36\1\41\1\40\1\101"+
    "\24\41\3\0\12\41\2\0\7\41\13\0\2\41\1\40"+
    "\1\101\24\41\3\0\12\41\2\0\7\41\13\0\1\102"+
    "\1\103\1\104\66\0\2\41\1\0\1\101\24\41\3\0"+
    "\12\41\2\0\7\41\13\0\2\4\2\0\2\4\1\105"+
    "\14\4\1\106\4\4\3\0\12\4\2\0\7\4\13\0"+
    "\2\4\2\0\1\4\1\107\22\4\3\0\12\4\2\0"+
    "\7\4\13\0\2\4\2\0\14\4\1\110\4\4\1\111"+
    "\2\4\3\0\12\4\2\0\7\4\13\0\2\4\2\0"+
    "\1\4\1\112\11\4\1\113\10\4\3\0\12\4\2\0"+
    "\7\4\13\0\2\4\2\0\4\4\1\114\1\115\16\4"+
    "\3\0\12\4\2\0\7\4\13\0\2\4\2\0\3\4"+
    "\1\116\20\4\3\0\12\4\2\0\7\4\13\0\2\4"+
    "\2\0\3\4\1\117\20\4\3\0\12\4\2\0\7\4"+
    "\13\0\2\4\2\0\11\4\1\120\12\4\3\0\12\4"+
    "\2\0\7\4\13\0\2\4\2\0\13\4\1\121\10\4"+
    "\3\0\12\4\2\0\7\4\13\0\2\4\2\0\21\4"+
    "\1\122\2\4\3\0\12\4\2\0\7\4\13\0\2\4"+
    "\2\0\17\4\1\123\3\4\1\124\3\0\12\4\2\0"+
    "\7\4\13\0\2\4\2\0\4\4\1\125\17\4\3\0"+
    "\12\4\2\0\7\4\13\0\2\4\2\0\11\4\1\126"+
    "\12\4\3\0\12\4\2\0\7\4\13\0\2\4\2\0"+
    "\12\4\1\127\11\4\3\0\12\4\2\0\7\4\13\0"+
    "\2\4\2\0\13\4\1\130\1\131\4\4\1\132\2\4"+
    "\3\0\12\4\2\0\7\4\13\0\2\4\2\0\20\4"+
    "\1\133\3\4\3\0\12\4\2\0\7\4\13\0\2\4"+
    "\2\0\14\4\1\134\7\4\3\0\12\4\2\0\7\4"+
    "\13\0\2\4\2\0\10\4\1\135\13\4\3\0\12\4"+
    "\2\0\7\4\13\0\2\4\2\0\12\4\1\136\11\4"+
    "\3\0\12\4\2\0\7\4\13\0\2\4\2\0\23\4"+
    "\1\137\3\0\12\4\2\0\7\4\13\0\2\4\2\0"+
    "\21\4\1\140\2\4\3\0\12\4\2\0\7\4\33\0"+
    "\1\141\55\0\1\142\117\0\1\143\75\0\1\144\76\0"+
    "\1\145\54\0\1\146\6\0\1\147\1\0\1\150\22\0"+
    "\61\75\1\0\7\75\2\0\1\102\1\0\1\104\70\0"+
    "\1\104\66\0\1\104\1\0\1\151\66\0\2\4\2\0"+
    "\3\4\1\152\20\4\3\0\12\4\2\0\7\4\13\0"+
    "\2\4\2\0\3\4\1\110\20\4\3\0\12\4\2\0"+
    "\7\4\13\0\2\4\2\0\7\4\1\153\14\4\3\0"+
    "\12\4\2\0\7\4\13\0\2\4\2\0\13\4\1\154"+
    "\10\4\3\0\12\4\2\0\7\4\13\0\2\4\2\0"+
    "\3\4\1\155\20\4\3\0\12\4\2\0\7\4\13\0"+
    "\2\4\2\0\11\4\1\156\12\4\3\0\12\4\2\0"+
    "\7\4\13\0\2\4\2\0\1\4\1\157\22\4\3\0"+
    "\12\4\2\0\7\4\13\0\2\4\2\0\17\4\1\160"+
    "\4\4\3\0\12\4\2\0\7\4\13\0\2\4\2\0"+
    "\5\4\1\161\3\4\1\162\12\4\3\0\12\4\2\0"+
    "\7\4\13\0\2\4\2\0\1\4\1\163\22\4\3\0"+
    "\12\4\2\0\7\4\13\0\2\4\2\0\10\4\1\164"+
    "\13\4\3\0\12\4\2\0\7\4\13\0\2\4\2\0"+
    "\1\4\1\165\22\4\3\0\12\4\2\0\7\4\13\0"+
    "\2\4\2\0\3\4\1\166\20\4\3\0\12\4\2\0"+
    "\7\4\13\0\2\4\2\0\21\4\1\167\2\4\3\0"+
    "\12\4\2\0\7\4\13\0\2\4\2\0\14\4\1\170"+
    "\7\4\3\0\12\4\2\0\7\4\13\0\2\4\2\0"+
    "\5\4\1\171\16\4\3\0\12\4\2\0\7\4\13\0"+
    "\2\4\2\0\14\4\1\172\7\4\3\0\12\4\2\0"+
    "\7\4\13\0\2\4\2\0\5\4\1\173\16\4\3\0"+
    "\12\4\2\0\7\4\13\0\2\4\2\0\5\4\1\174"+
    "\16\4\3\0\12\4\2\0\7\4\13\0\2\4\2\0"+
    "\10\4\1\175\13\4\3\0\12\4\2\0\7\4\13\0"+
    "\2\4\2\0\1\4\1\176\3\4\1\177\16\4\3\0"+
    "\12\4\2\0\7\4\13\0\2\4\2\0\16\4\1\200"+
    "\5\4\3\0\12\4\2\0\7\4\13\0\2\4\2\0"+
    "\5\4\1\201\16\4\3\0\12\4\2\0\7\4\13\0"+
    "\2\4\2\0\12\4\1\202\11\4\3\0\12\4\2\0"+
    "\7\4\13\0\2\4\2\0\3\4\1\203\20\4\3\0"+
    "\12\4\2\0\7\4\13\0\2\4\2\0\1\4\1\204"+
    "\22\4\3\0\12\4\2\0\7\4\22\0\1\205\116\0"+
    "\1\206\102\0\1\207\62\0\1\210\63\0\1\211\75\0"+
    "\1\212\76\0\1\213\21\0\1\151\1\0\1\214\66\0"+
    "\2\4\2\0\4\4\1\215\17\4\3\0\12\4\2\0"+
    "\7\4\13\0\2\4\2\0\10\4\1\216\13\4\3\0"+
    "\12\4\2\0\7\4\13\0\2\4\2\0\3\4\1\217"+
    "\20\4\3\0\12\4\2\0\7\4\13\0\2\4\2\0"+
    "\4\4\1\220\17\4\3\0\12\4\2\0\7\4\13\0"+
    "\2\4\2\0\11\4\1\221\12\4\3\0\12\4\2\0"+
    "\7\4\13\0\2\4\2\0\1\4\1\222\22\4\1\141"+
    "\2\0\12\4\2\0\7\4\13\0\2\4\2\0\1\4"+
    "\1\223\22\4\3\0\12\4\2\0\7\4\13\0\2\4"+
    "\2\0\5\4\1\224\16\4\3\0\12\4\2\0\7\4"+
    "\13\0\2\4\2\0\2\4\1\225\21\4\3\0\12\4"+
    "\2\0\7\4\13\0\2\4\2\0\7\4\1\226\5\4"+
    "\1\227\6\4\3\0\12\4\2\0\7\4\13\0\2\4"+
    "\2\0\12\4\1\230\11\4\3\0\12\4\2\0\7\4"+
    "\13\0\2\4\2\0\1\4\1\231\22\4\3\0\12\4"+
    "\2\0\7\4\13\0\2\4\2\0\4\4\1\232\17\4"+
    "\3\0\12\4\2\0\7\4\13\0\2\4\2\0\1\4"+
    "\1\233\22\4\3\0\12\4\2\0\7\4\13\0\2\4"+
    "\2\0\7\4\1\234\14\4\3\0\12\4\2\0\7\4"+
    "\13\0\2\4\2\0\17\4\1\235\4\4\3\0\12\4"+
    "\2\0\7\4\13\0\2\4\2\0\12\4\1\236\11\4"+
    "\3\0\12\4\2\0\7\4\13\0\2\4\2\0\17\4"+
    "\1\237\4\4\3\0\12\4\2\0\7\4\13\0\2\4"+
    "\2\0\5\4\1\240\16\4\3\0\12\4\2\0\7\4"+
    "\13\0\2\4\2\0\3\4\1\241\20\4\3\0\12\4"+
    "\2\0\7\4\13\0\2\4\2\0\5\4\1\242\16\4"+
    "\3\0\12\4\2\0\7\4\13\0\2\4\2\0\11\4"+
    "\1\243\12\4\3\0\12\4\2\0\7\4\13\0\2\4"+
    "\2\0\13\4\1\244\10\4\3\0\12\4\2\0\7\4"+
    "\13\0\2\4\2\0\21\4\1\245\2\4\3\0\12\4"+
    "\2\0\7\4\13\0\2\4\2\0\11\4\1\246\12\4"+
    "\3\0\12\4\2\0\7\4\23\0\1\247\116\0\1\250"+
    "\102\0\1\251\73\0\1\252\52\0\1\253\102\0\1\254"+
    "\62\0\1\255\27\0\1\214\2\0\1\256\65\0\2\4"+
    "\2\0\3\4\1\257\20\4\3\0\12\4\2\0\7\4"+
    "\13\0\2\4\2\0\11\4\1\260\12\4\3\0\12\4"+
    "\2\0\7\4\13\0\2\4\2\0\5\4\1\261\16\4"+
    "\3\0\12\4\2\0\7\4\13\0\2\4\2\0\1\262"+
    "\23\4\3\0\12\4\2\0\7\4\13\0\2\4\2\0"+
    "\5\4\1\235\16\4\3\0\12\4\2\0\7\4\13\0"+
    "\2\4\2\0\5\4\1\263\16\4\3\0\12\4\2\0"+
    "\7\4\13\0\2\4\2\0\5\4\1\264\16\4\3\0"+
    "\12\4\2\0\7\4\13\0\2\4\2\0\2\4\1\261"+
    "\21\4\3\0\12\4\2\0\7\4\13\0\2\4\2\0"+
    "\14\4\1\265\7\4\3\0\12\4\2\0\7\4\13\0"+
    "\2\4\2\0\22\4\1\266\1\4\3\0\12\4\2\0"+
    "\7\4\13\0\2\4\2\0\1\4\1\241\22\4\3\0"+
    "\12\4\2\0\7\4\13\0\2\4\2\0\11\4\1\267"+
    "\12\4\3\0\12\4\2\0\7\4\13\0\1\4\1\270"+
    "\2\0\24\4\3\0\12\4\2\0\7\4\13\0\2\4"+
    "\2\0\3\4\1\271\20\4\3\0\12\4\2\0\7\4"+
    "\13\0\2\4\2\0\1\4\1\246\22\4\3\0\12\4"+
    "\2\0\7\4\13\0\2\4\2\0\1\4\1\272\22\4"+
    "\1\141\2\0\12\4\2\0\7\4\13\0\2\4\2\0"+
    "\11\4\1\273\12\4\3\0\12\4\2\0\7\4\13\0"+
    "\2\4\2\0\5\4\1\110\16\4\3\0\12\4\2\0"+
    "\7\4\13\0\2\4\2\0\13\4\1\274\10\4\3\0"+
    "\12\4\2\0\7\4\13\0\2\4\2\0\14\4\1\275"+
    "\7\4\3\0\12\4\2\0\7\4\13\0\2\4\2\0"+
    "\16\4\1\276\5\4\3\0\12\4\2\0\7\4\13\0"+
    "\2\4\2\0\1\4\1\277\22\4\3\0\12\4\2\0"+
    "\7\4\30\0\1\141\107\0\1\300\73\0\1\301\70\0"+
    "\1\302\67\0\1\303\102\0\1\304\73\0\1\305\15\0"+
    "\2\4\2\0\5\4\1\306\16\4\3\0\12\4\2\0"+
    "\7\4\13\0\2\4\2\0\1\4\1\307\22\4\3\0"+
    "\12\4\2\0\7\4\13\0\2\4\2\0\13\4\1\310"+
    "\10\4\3\0\12\4\2\0\7\4\13\0\2\4\2\0"+
    "\5\4\1\311\16\4\3\0\12\4\2\0\7\4\13\0"+
    "\2\4\2\0\24\4\1\0\1\312\1\0\12\4\2\0"+
    "\7\4\13\0\2\4\2\0\10\4\1\313\13\4\3\0"+
    "\12\4\2\0\7\4\13\0\2\4\2\0\17\4\1\314"+
    "\4\4\3\0\12\4\2\0\7\4\13\0\2\4\2\0"+
    "\14\4\1\315\7\4\3\0\12\4\2\0\7\4\13\0"+
    "\2\4\2\0\11\4\1\245\12\4\3\0\12\4\2\0"+
    "\7\4\13\0\2\4\2\0\13\4\1\316\10\4\3\0"+
    "\12\4\2\0\7\4\13\0\2\4\2\0\1\4\1\257"+
    "\22\4\3\0\12\4\2\0\7\4\13\0\2\4\2\0"+
    "\5\4\1\317\16\4\3\0\12\4\2\0\7\4\13\0"+
    "\2\4\2\0\17\4\1\320\4\4\3\0\12\4\2\0"+
    "\7\4\13\0\2\4\2\0\10\4\1\321\13\4\3\0"+
    "\12\4\2\0\7\4\13\0\2\4\2\0\1\4\1\322"+
    "\22\4\3\0\12\4\2\0\7\4\52\0\1\323\65\0"+
    "\1\324\70\0\1\325\70\0\1\326\73\0\1\327\70\0"+
    "\1\330\31\0\2\4\2\0\5\4\1\331\16\4\3\0"+
    "\12\4\2\0\7\4\13\0\2\4\2\0\16\4\1\235"+
    "\5\4\3\0\12\4\2\0\7\4\13\0\2\4\2\0"+
    "\1\4\1\110\22\4\3\0\12\4\2\0\7\4\34\0"+
    "\1\332\47\0\2\4\2\0\15\4\1\333\6\4\3\0"+
    "\12\4\2\0\7\4\13\0\2\4\2\0\17\4\1\334"+
    "\4\4\3\0\12\4\2\0\7\4\13\0\2\4\2\0"+
    "\4\4\1\245\17\4\3\0\12\4\2\0\7\4\13\0"+
    "\2\4\2\0\15\4\1\335\6\4\3\0\12\4\2\0"+
    "\7\4\13\0\1\4\1\336\2\0\24\4\3\0\12\4"+
    "\2\0\7\4\13\0\2\4\2\0\17\4\1\271\4\4"+
    "\3\0\12\4\2\0\7\4\13\0\2\4\2\0\11\4"+
    "\1\337\12\4\3\0\12\4\2\0\7\4\53\0\1\340"+
    "\67\0\1\341\103\0\1\342\55\0\1\343\65\0\1\344"+
    "\70\0\1\345\34\0\1\4\1\346\2\0\24\4\3\0"+
    "\12\4\2\0\7\4\32\0\1\347\51\0\2\4\2\0"+
    "\11\4\1\350\12\4\3\0\12\4\2\0\7\4\13\0"+
    "\2\4\2\0\13\4\1\351\10\4\3\0\12\4\2\0"+
    "\7\4\13\0\2\4\2\0\15\4\1\352\6\4\3\0"+
    "\12\4\2\0\7\4\13\0\2\4\2\0\15\4\1\353"+
    "\6\4\1\354\2\0\12\4\2\0\7\4\53\0\1\355"+
    "\101\0\1\356\54\0\1\357\73\0\1\360\67\0\1\361"+
    "\103\0\1\362\16\0\2\4\2\0\12\4\1\363\11\4"+
    "\3\0\12\4\2\0\7\4\24\0\1\364\57\0\2\4"+
    "\2\0\1\4\1\365\22\4\3\0\12\4\2\0\7\4"+
    "\13\0\2\4\2\0\4\4\1\366\17\4\3\0\12\4"+
    "\2\0\7\4\13\0\2\4\2\0\13\4\1\367\10\4"+
    "\3\0\12\4\2\0\7\4\13\0\2\4\2\0\13\4"+
    "\1\370\10\4\3\0\12\4\2\0\7\4\26\0\1\371"+
    "\116\0\1\372\101\0\1\373\47\0\1\374\77\0\1\375"+
    "\101\0\1\376\54\0\1\377\33\0\2\4\2\0\7\4"+
    "\1\u0100\14\4\3\0\12\4\2\0\7\4\30\0\1\u0101"+
    "\53\0\2\4\2\0\10\4\1\u0102\13\4\3\0\12\4"+
    "\2\0\7\4\13\0\2\4\2\0\1\245\23\4\3\0"+
    "\12\4\2\0\7\4\13\0\2\4\2\0\5\4\1\u0103"+
    "\16\4\3\0\12\4\2\0\7\4\13\0\2\4\2\0"+
    "\5\4\1\u0104\16\4\3\0\12\4\2\0\7\4\33\0"+
    "\1\u0105\51\0\1\u0106\124\0\1\u0107\33\0\2\u0108\2\0"+
    "\24\u0108\3\0\12\u0108\2\0\7\u0108\54\0\1\u0109\101\0"+
    "\1\u010a\47\0\1\u010b\37\0\2\4\2\0\1\4\1\u010c"+
    "\22\4\3\0\12\4\2\0\7\4\22\0\1\u010d\61\0"+
    "\2\4\2\0\5\4\1\246\16\4\3\0\12\4\2\0"+
    "\7\4\13\0\2\4\2\0\1\4\1\u010e\22\4\3\0"+
    "\12\4\2\0\7\4\13\0\2\4\2\0\11\4\1\u010f"+
    "\12\4\3\0\12\4\2\0\7\4\55\0\1\u0110\101\0"+
    "\1\u0111\15\0\2\u0108\2\0\24\u0108\3\0\12\u0108\1\u0112"+
    "\1\0\7\u0108\14\0\1\u0113\124\0\1\u0114\33\0\2\u0115"+
    "\2\0\24\u0115\3\0\12\u0115\2\0\7\u0115\13\0\2\4"+
    "\2\0\4\4\1\u0116\17\4\3\0\12\4\2\0\7\4"+
    "\20\0\1\u0117\63\0\2\4\2\0\3\4\1\u0118\20\4"+
    "\3\0\12\4\2\0\7\4\13\0\2\4\2\0\3\4"+
    "\1\u0119\20\4\3\0\12\4\2\0\7\4\50\0\1\u011a"+
    "\34\0\1\u011b\131\0\1\u011c\101\0\1\u011d\15\0\2\u0115"+
    "\2\0\24\u0115\3\0\12\u0115\1\u011e\1\0\7\u0115\13\0"+
    "\2\4\2\0\13\4\1\u011f\10\4\3\0\12\4\2\0"+
    "\7\4\40\0\1\u0105\43\0\2\4\2\0\21\4\1\u0120"+
    "\2\4\3\0\12\4\2\0\7\4\13\0\2\4\2\0"+
    "\1\4\1\u0121\22\4\3\0\12\4\2\0\7\4\53\0"+
    "\1\u0122\67\0\1\u0123\4\0\1\u0124\2\0\1\u0125\2\0"+
    "\1\u0126\53\0\1\u0127\34\0\1\u0128\67\0\2\4\2\0"+
    "\5\4\1\u0129\16\4\3\0\12\4\2\0\7\4\12\0"+
    "\1\u012a\2\4\2\0\24\4\3\0\12\4\2\0\7\4"+
    "\13\0\2\4\2\0\21\4\1\110\2\4\3\0\12\4"+
    "\2\0\7\4\56\0\1\u012b\60\0\1\u012c\104\0\1\u012d"+
    "\56\0\1\u012e\106\0\1\u012f\55\0\1\u0130\67\0\1\u0131"+
    "\4\0\1\u0132\2\0\1\u0133\2\0\1\u0134\16\0\2\4"+
    "\2\0\3\4\1\u0135\20\4\3\0\12\4\2\0\7\4"+
    "\26\0\1\u0136\1\0\1\u0137\10\0\1\u0138\106\0\1\u0139"+
    "\57\0\1\u013a\76\0\1\u013b\67\0\1\u013c\101\0\1\u013d"+
    "\62\0\1\u013e\60\0\1\u013f\104\0\1\u0140\56\0\1\u0141"+
    "\106\0\1\u0142\15\0\2\4\2\0\14\4\1\u0143\7\4"+
    "\3\0\12\4\2\0\7\4\32\0\1\u0144\75\0\1\u0145"+
    "\53\0\1\u0146\126\0\1\u0147\62\0\1\u0148\104\0\1\u0149"+
    "\55\0\1\u014a\71\0\1\u014b\73\0\1\u014c\57\0\1\u014d"+
    "\76\0\1\u014e\67\0\1\u014f\101\0\1\u0150\17\0\2\4"+
    "\2\0\4\4\1\306\17\4\3\0\12\4\2\0\7\4"+
    "\21\0\1\u0151\65\0\1\u0152\73\0\1\u0153\116\0\1\u0154"+
    "\73\0\1\u0155\70\0\1\u0156\65\0\1\u0157\101\0\1\u0158"+
    "\62\0\1\u0159\104\0\1\u015a\55\0\1\u015b\71\0\1\u015c"+
    "\34\0\1\u015d\72\0\1\u0145\122\0\1\u015e\63\0\1\u015f"+
    "\107\0\1\u0160\71\0\1\u0161\50\0\1\u0162\73\0\1\u0163"+
    "\70\0\1\u0164\65\0\1\u0165\51\0\1\u0166\125\0\1\u0167"+
    "\70\0\1\u0168\60\0\1\u0169\65\0\1\u016a\72\0\1\u016b"+
    "\63\0\1\u016c\107\0\1\u016d\71\0\1\u016e\21\0\1\u016f"+
    "\133\0\1\u0170\72\0\1\u0171\57\0\1\u0172\76\0\1\u0173"+
    "\73\0\1\u0174\70\0\1\u0175\60\0\1\u0176\65\0\1\u0177"+
    "\42\0\1\u0178\123\0\1\u0179\71\0\1\u017a\67\0\1\u017b"+
    "\65\0\1\u017c\77\0\1\u017d\72\0\1\u017e\57\0\1\u017f"+
    "\76\0\1\u0180\30\0\1\u0181\126\0\1\u0182\70\0\1\u0183"+
    "\67\0\1\u0184\70\0\1\u0185\71\0\1\u0186\67\0\1\u0187"+
    "\65\0\1\u0188\46\0\1\u0145\116\0\1\u0189\70\0\1\u018a"+
    "\70\0\1\u018b\67\0\1\u018c\71\0\1\u018d\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20292];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\2\11\15\1\1\11\4\1\5\11"+
    "\4\0\25\1\6\0\1\1\1\0\1\1\2\11\3\0"+
    "\34\1\1\11\10\0\33\1\10\0\32\1\7\0\1\11"+
    "\21\1\6\0\4\1\1\0\10\1\6\0\1\1\1\0"+
    "\5\1\6\0\1\1\1\0\4\1\7\0\1\1\1\0"+
    "\4\1\7\0\1\1\1\0\3\1\1\11\6\0\1\1"+
    "\1\0\2\1\2\0\1\11\3\0\1\1\1\0\2\1"+
    "\4\0\1\11\3\1\7\0\1\1\13\0\1\1\15\0"+
    "\1\1\3\0\1\11\12\0\1\11\5\0\1\11\41\0"+
    "\1\11\7\0\2\11\2\0\1\11\2\0\3\11\1\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[397];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public int getYyLine(){
		return yyline+1;
	}
	public int getYyColumn(){
		return yycolumn+1;
	}
	public String getYyText(){
		return yytext();
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { return new Symbol(sym.PF);
          }
        case 44: break;
        case 17: 
          { return new Symbol(sym.ACTION, new String(yytext()));
          }
        case 45: break;
        case 34: 
          { return new Symbol(sym.APPAREIL, new String(yytext()));
          }
        case 46: break;
        case 14: 
          { return new Symbol(sym.SI, new String(yytext()));
          }
        case 47: break;
        case 10: 
          { return new Symbol(sym.PV);
          }
        case 48: break;
        case 1: 
          { System.out.println(" Erreur ligne "+(yyline+1)+" colonne "+(yycolumn+1)+" : "+yytext()+" => caractÃšre inconnu ! ");
          }
        case 49: break;
        case 31: 
          { return new Symbol(sym.DSCO);
          }
        case 50: break;
        case 38: 
          { return new Symbol(sym.DCO);
          }
        case 51: break;
        case 15: 
          { return new Symbol(sym.cm);
          }
        case 52: break;
        case 32: 
          { return new Symbol(sym.DSCF);
          }
        case 53: break;
        case 42: 
          { return new Symbol(sym.DCF);
          }
        case 54: break;
        case 20: 
          { return new Symbol(sym.ETAT, new String(yytext()));
          }
        case 55: break;
        case 26: 
          { return new Symbol(sym.DATE);
          }
        case 56: break;
        case 4: 
          { return new Symbol(sym.VG);
          }
        case 57: break;
        case 23: 
          { return new Symbol(sym.SINON, new String(yytext()));
          }
        case 58: break;
        case 11: 
          { return new Symbol(sym.PT);
          }
        case 59: break;
        case 30: 
          { return new Symbol(sym.POURTOUT, new String(yytext()));
          }
        case 60: break;
        case 33: 
          { return new Symbol(sym.PDO);
          }
        case 61: break;
        case 35: 
          { return new Symbol(sym.PDF);
          }
        case 62: break;
        case 37: 
          { return new Symbol(sym.DAO);
          }
        case 63: break;
        case 29: 
          { return new Symbol(sym.MESSAGE, new String(yytext()));
          }
        case 64: break;
        case 41: 
          { return new Symbol(sym.DAF);
          }
        case 65: break;
        case 21: 
          { return new Symbol(sym.FAIT, new String(yytext()));
          }
        case 66: break;
        case 25: 
          { return new Symbol(sym.APPAREIL_TYPE, new String(yytext()));
          }
        case 67: break;
        case 8: 
          { return new Symbol(sym.EGAL);
          }
        case 68: break;
        case 28: 
          { return new Symbol(sym.MOT_CLE, new String(yytext()));
          }
        case 69: break;
        case 19: 
          { return new Symbol(sym.ETATS, new String(yytext()));
          }
        case 70: break;
        case 18: 
          { return new Symbol(sym.FSI, new String(yytext()));
          }
        case 71: break;
        case 40: 
          { return new Symbol(sym.DIO);
          }
        case 72: break;
        case 43: 
          { return new Symbol(sym.DIF);
          }
        case 73: break;
        case 16: 
          { return new Symbol(sym.DEGAL);
          }
        case 74: break;
        case 12: 
          { return new Symbol(sym.AO);
          }
        case 75: break;
        case 27: 
          { return new Symbol(sym.INTERFACE_TYPE, new String(yytext()));
          }
        case 76: break;
        case 13: 
          { return new Symbol(sym.AF);
          }
        case 77: break;
        case 36: 
          { return new Symbol(sym.DSO);
          }
        case 78: break;
        case 39: 
          { return new Symbol(sym.DSF);
          }
        case 79: break;
        case 24: 
          { return new Symbol(sym.ALORS, new String(yytext()));
          }
        case 80: break;
        case 9: 
          { return new Symbol(sym.DP);
          }
        case 81: break;
        case 2: 
          { return new Symbol(sym.PO);
          }
        case 82: break;
        case 22: 
          { return new Symbol(sym.FAIRE, new String(yytext()));
          }
        case 83: break;
        case 6: 
          { 
          }
        case 84: break;
        case 3: 
          { return new Symbol(sym.nom, new String(yytext()));
          }
        case 85: break;
        case 7: 
          { return new Symbol(sym.COTE);
          }
        case 86: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
