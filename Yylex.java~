/* The following code was generated by JFlex 1.4.3 on 22/11/2020 22:06 */

// Specification JFlex

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 22/11/2020 22:06 from the specification file
 * <tt>jflex.lex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\0\25\0\1\30\1\0\1\55\5\0\1\1\1\5\2\0"+
    "\1\4\1\0\1\6\1\45\12\2\1\57\1\60\1\31\1\56\1\44"+
    "\2\0\1\36\1\54\1\46\1\41\1\40\1\53\1\35\1\54\1\51"+
    "\2\54\1\47\1\37\1\52\1\34\1\32\1\54\1\33\1\43\1\50"+
    "\1\42\5\54\4\0\1\3\1\0\1\22\1\54\1\27\1\21\1\15"+
    "\1\14\2\54\1\13\2\54\1\23\1\16\1\20\1\7\1\25\1\54"+
    "\1\12\1\24\1\17\1\10\1\11\4\54\1\61\1\0\1\62\153\0"+
    "\1\26\uff16\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\16\0\1\15"+
    "\1\3\20\0\1\16\20\0\1\17\10\0\1\20\13\0"+
    "\2\21\12\0\1\21\42\0\1\22\11\0\1\23\34\0"+
    "\1\24\15\0\1\25\35\0\1\26\6\0\1\27\1\30"+
    "\2\0\1\31\2\0\1\32\1\33\1\34\1\0\1\35";

  private static int [] zzUnpackAction() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\63\0\63\0\314\0\377"+
    "\0\63\0\u0132\0\63\0\63\0\63\0\63\0\u0165\0\u0198"+
    "\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd\0\u0330"+
    "\0\u0363\0\u0396\0\u03c9\0\u03fc\0\63\0\63\0\u042f\0\u0462"+
    "\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7\0\u05fa"+
    "\0\u062d\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c\0\63\0\u075f"+
    "\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7"+
    "\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\63"+
    "\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4"+
    "\0\63\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59"+
    "\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\63\0\u0e58\0\u0e8b\0\u0ebe"+
    "\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u1056"+
    "\0\u1089\0\u10bc\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee"+
    "\0\u1221\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u1386"+
    "\0\u13b9\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e"+
    "\0\u1551\0\u1584\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6"+
    "\0\u16e9\0\u171c\0\u174f\0\63\0\u1782\0\u17b5\0\u17e8\0\u181b"+
    "\0\u184e\0\u1881\0\u18b4\0\u18e7\0\u191a\0\63\0\u194d\0\u1980"+
    "\0\u19b3\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18"+
    "\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\u1cb0"+
    "\0\u1ce3\0\u1d16\0\u1d49\0\u1d7c\0\u1daf\0\u1de2\0\u1e15\0\u1e48"+
    "\0\u1e7b\0\u1eae\0\63\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a\0\u1fad"+
    "\0\u1fe0\0\u2013\0\u2046\0\u2079\0\u20ac\0\u20df\0\u2112\0\u2145"+
    "\0\63\0\u2178\0\u21ab\0\u21de\0\u2211\0\u2244\0\u2277\0\u22aa"+
    "\0\u22dd\0\u2310\0\u2343\0\u2376\0\u23a9\0\u23dc\0\u240f\0\u2442"+
    "\0\u2475\0\u24a8\0\u24db\0\u250e\0\u2541\0\u2574\0\u25a7\0\u25da"+
    "\0\u260d\0\u2640\0\u2673\0\u26a6\0\u26d9\0\u270c\0\63\0\u273f"+
    "\0\u2772\0\u27a5\0\u27d8\0\u280b\0\u283e\0\63\0\63\0\u2871"+
    "\0\u28a4\0\63\0\u28d7\0\u290a\0\63\0\63\0\63\0\u293d"+
    "\0\63";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\17\4\1\2"+
    "\1\4\1\2\1\10\12\4\2\2\7\4\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\65\0\1\17\1\20\1\21"+
    "\2\0\17\22\1\0\1\22\2\0\12\22\2\0\7\22"+
    "\7\0\1\23\2\4\3\0\17\4\1\0\1\4\2\0"+
    "\12\4\2\0\7\4\15\0\1\24\4\0\1\25\1\26"+
    "\1\0\1\27\2\0\1\30\72\0\1\31\6\0\1\32"+
    "\1\0\1\33\1\0\1\34\73\0\1\35\6\0\1\17"+
    "\1\22\1\21\1\36\1\0\17\22\1\0\1\22\2\0"+
    "\12\22\2\0\7\22\10\0\2\22\1\21\1\36\1\0"+
    "\17\22\1\0\1\22\2\0\12\22\2\0\7\22\10\0"+
    "\1\37\1\40\1\41\60\0\2\22\1\0\1\36\1\0"+
    "\17\22\1\0\1\22\2\0\12\22\2\0\7\22\10\0"+
    "\2\42\3\0\17\42\1\0\1\42\2\0\12\42\2\0"+
    "\7\42\16\0\1\43\67\0\1\44\64\0\1\45\65\0"+
    "\1\46\63\0\1\47\72\0\1\50\67\0\1\51\70\0"+
    "\1\52\46\0\1\53\6\0\1\54\1\0\1\55\21\0"+
    "\1\37\1\0\1\41\62\0\1\41\60\0\1\41\1\0"+
    "\1\56\60\0\2\42\1\0\1\57\1\0\17\42\1\0"+
    "\1\42\2\0\12\42\2\0\7\42\17\0\1\60\63\0"+
    "\1\61\65\0\1\62\4\0\1\63\56\0\1\64\67\0"+
    "\1\65\73\0\1\66\74\0\1\67\54\0\1\70\55\0"+
    "\1\71\67\0\1\72\70\0\1\73\16\0\1\56\1\0"+
    "\1\74\70\0\1\75\66\0\1\76\57\0\1\77\66\0"+
    "\1\100\56\0\1\101\57\0\1\102\107\0\1\103\74\0"+
    "\1\104\65\0\1\105\44\0\1\106\74\0\1\107\54\0"+
    "\1\110\24\0\1\74\2\0\1\111\70\0\1\112\64\0"+
    "\1\113\65\0\1\114\66\0\1\115\54\0\1\116\77\0"+
    "\1\117\65\0\1\120\62\0\1\121\61\0\1\122\74\0"+
    "\1\123\65\0\1\124\22\0\1\125\62\0\1\126\71\0"+
    "\1\127\56\0\1\112\62\0\1\130\103\0\1\131\57\0"+
    "\1\132\62\0\1\133\62\0\1\134\65\0\1\135\62\0"+
    "\1\136\54\0\1\137\44\0\1\140\62\0\1\141\107\0"+
    "\1\142\61\0\1\143\75\0\1\144\47\0\1\145\57\0"+
    "\1\146\62\0\1\147\54\0\1\150\52\0\1\125\50\0"+
    "\1\151\116\0\1\152\73\0\1\153\46\0\1\154\65\0"+
    "\1\155\61\0\1\156\75\0\1\157\33\0\1\160\65\0"+
    "\1\150\1\161\74\0\1\162\73\0\1\163\41\0\1\164"+
    "\71\0\1\165\73\0\1\166\46\0\1\167\40\0\1\170"+
    "\77\0\1\171\36\0\1\172\113\0\1\173\35\0\17\174"+
    "\1\0\1\174\2\0\12\174\2\0\7\174\46\0\1\175"+
    "\73\0\1\176\41\0\1\177\51\0\1\200\52\0\1\125"+
    "\114\0\1\201\73\0\1\202\12\0\1\203\4\0\17\174"+
    "\1\0\1\174\2\0\12\174\1\204\1\0\7\174\11\0"+
    "\1\205\113\0\1\206\35\0\17\207\1\0\1\207\2\0"+
    "\12\207\2\0\7\207\21\0\1\210\103\0\1\211\31\0"+
    "\1\212\61\0\1\203\41\0\1\204\57\0\1\213\73\0"+
    "\1\214\12\0\1\215\4\0\17\207\1\0\1\207\2\0"+
    "\12\207\1\216\1\0\7\207\23\0\1\217\104\0\1\220"+
    "\61\0\1\221\4\0\1\222\2\0\1\223\2\0\1\224"+
    "\45\0\1\225\31\0\1\226\61\0\1\215\41\0\1\216"+
    "\41\0\1\125\101\0\1\227\52\0\1\230\76\0\1\231"+
    "\50\0\1\232\100\0\1\233\47\0\1\234\61\0\1\235"+
    "\4\0\1\236\2\0\1\237\2\0\1\240\54\0\1\241"+
    "\51\0\1\242\70\0\1\243\61\0\1\244\73\0\1\245"+
    "\54\0\1\246\52\0\1\247\76\0\1\250\50\0\1\251"+
    "\100\0\1\252\54\0\1\253\54\0\1\254\76\0\1\255"+
    "\47\0\1\256\63\0\1\257\65\0\1\260\51\0\1\261"+
    "\70\0\1\262\61\0\1\263\73\0\1\264\45\0\1\265"+
    "\65\0\1\266\62\0\1\267\57\0\1\270\73\0\1\271"+
    "\54\0\1\272\76\0\1\273\47\0\1\274\63\0\1\275"+
    "\62\0\1\276\55\0\1\277\101\0\1\300\63\0\1\301"+
    "\42\0\1\302\65\0\1\303\62\0\1\304\57\0\1\305"+
    "\100\0\1\306\62\0\1\307\52\0\1\310\57\0\1\311"+
    "\64\0\1\312\55\0\1\313\101\0\1\314\63\0\1\315"+
    "\56\0\1\316\64\0\1\317\51\0\1\320\70\0\1\321"+
    "\65\0\1\322\62\0\1\323\52\0\1\324\57\0\1\325"+
    "\67\0\1\326\63\0\1\327\61\0\1\330\57\0\1\331"+
    "\71\0\1\332\64\0\1\333\51\0\1\334\70\0\1\335"+
    "\60\0\1\336\62\0\1\337\61\0\1\340\62\0\1\341"+
    "\63\0\1\342\61\0\1\343\57\0\1\344\66\0\1\345"+
    "\62\0\1\346\62\0\1\347\61\0\1\350\63\0\1\351"+
    "\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10608];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\2\11\2\1\1\11\1\1\4\11"+
    "\16\0\2\11\20\0\1\11\20\0\1\11\10\0\1\11"+
    "\13\0\1\11\1\1\12\0\1\1\42\0\1\11\11\0"+
    "\1\11\34\0\1\11\15\0\1\11\35\0\1\11\6\0"+
    "\2\11\2\0\1\11\2\0\3\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 144) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 11: 
          { return new Symbol(sym.AO);
          }
        case 30: break;
        case 9: 
          { return new Symbol(sym.DP);
          }
        case 31: break;
        case 6: 
          { return new Symbol(sym.PT);
          }
        case 32: break;
        case 12: 
          { return new Symbol(sym.AF);
          }
        case 33: break;
        case 15: 
          { return new Symbol(sym.ETAT);
          }
        case 34: break;
        case 10: 
          { return new Symbol(sym.PV);
          }
        case 35: break;
        case 22: 
          { return new Symbol(sym.DSO);
          }
        case 36: break;
        case 25: 
          { return new Symbol(sym.DSF);
          }
        case 37: break;
        case 2: 
          { return new Symbol(sym.PO);
          }
        case 38: break;
        case 5: 
          { return new Symbol(sym.PF);
          }
        case 39: break;
        case 20: 
          { return new Symbol(sym.PDO);
          }
        case 40: break;
        case 21: 
          { return new Symbol(sym.PDF);
          }
        case 41: break;
        case 7: 
          { return new Symbol(sym.H);
          }
        case 42: break;
        case 17: 
          { return new Symbol(sym.ACTION, new String(yytext()));
          }
        case 43: break;
        case 23: 
          { return new Symbol(sym.DAO);
          }
        case 44: break;
        case 14: 
          { return new Symbol(sym.APPAREIL, new String(yytext()));
          }
        case 45: break;
        case 27: 
          { return new Symbol(sym.DAF);
          }
        case 46: break;
        case 8: 
          { return new Symbol(sym.EGAL);
          }
        case 47: break;
        case 3: 
          { return new Symbol(sym.nom, new String(yytext()));
          }
        case 48: break;
        case 26: 
          { return new Symbol(sym.DIO);
          }
        case 49: break;
        case 29: 
          { return new Symbol(sym.DIF);
          }
        case 50: break;
        case 4: 
          { return new Symbol(sym.VG);
          }
        case 51: break;
        case 16: 
          { return new Symbol(sym.DATE);
          }
        case 52: break;
        case 24: 
          { return new Symbol(sym.DCO);
          }
        case 53: break;
        case 28: 
          { return new Symbol(sym.DCF);
          }
        case 54: break;
        case 18: 
          { return new Symbol(sym.DSCO);
          }
        case 55: break;
        case 19: 
          { return new Symbol(sym.DSCF);
          }
        case 56: break;
        case 1: 
          { 
          }
        case 57: break;
        case 13: 
          { return new Symbol(sym.DEGAL);
          }
        case 58: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
