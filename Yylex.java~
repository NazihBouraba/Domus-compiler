/* The following code was generated by JFlex 1.7.0 */

// Specification JFlex

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>jflex.lex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\0\1\67\1\67\1\67\22\0\1\31\1\0\1\54\5\0"+
    "\1\1\1\5\2\0\1\4\1\0\1\61\1\22\12\2\1\57\1\60"+
    "\1\6\1\53\1\21\2\0\1\13\1\32\1\23\1\16\1\15\1\30"+
    "\1\12\1\32\1\26\2\32\1\24\1\14\1\27\1\11\1\7\1\32"+
    "\1\10\1\20\1\25\1\17\5\32\4\0\1\3\1\0\1\36\1\65"+
    "\1\34\1\56\1\33\1\47\1\41\1\45\1\37\1\66\1\32\1\35"+
    "\1\50\1\51\1\43\1\52\1\32\1\40\1\55\1\44\1\46\1\42"+
    "\1\32\1\64\2\32\1\62\1\0\1\63\7\0\1\67\u1fa2\0\1\67"+
    "\1\67\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\16\1\1\5\2\1"+
    "\1\6\1\7\1\10\1\11\1\12\4\0\1\13\1\0"+
    "\1\14\17\0\1\15\7\0\1\16\2\0\1\15\101\0"+
    "\1\17\31\0\1\20\5\0\1\15\1\0\1\21\23\0"+
    "\1\15\4\0\1\22\26\0\1\22\6\0\1\22\3\0"+
    "\1\23\6\0\1\24\7\0\1\25\24\0\1\15\16\0"+
    "\1\26\13\0\1\27\14\0\1\30\27\0\1\31\11\0"+
    "\1\32\4\0\1\33\35\0\1\34\6\0\1\35\1\36"+
    "\2\0\1\37\2\0\1\40\1\41\1\42\1\0\1\43";

  private static int [] zzUnpackAction() {
    int [] result = new int[383];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\70\0\70\0\70\0\160\0\250\0\340"+
    "\0\u0118\0\u0150\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0"+
    "\0\u02d8\0\u0310\0\u0348\0\70\0\u0380\0\u03b8\0\70\0\70"+
    "\0\70\0\70\0\70\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0"+
    "\0\250\0\70\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620"+
    "\0\u0658\0\u0690\0\u06c8\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0"+
    "\0\u0818\0\250\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968"+
    "\0\u09a0\0\70\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0"+
    "\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0"+
    "\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70"+
    "\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030"+
    "\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u1180\0\u11b8\0\u11f0"+
    "\0\u1228\0\u1260\0\u1298\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0"+
    "\0\u13e8\0\u1420\0\u1458\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570"+
    "\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730"+
    "\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\250\0\u18b8"+
    "\0\u18f0\0\u1928\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\u1a78"+
    "\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\u1c00\0\u1c38"+
    "\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u1dc0\0\u1df8"+
    "\0\250\0\u1e30\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10\0\u1e68\0\u1f48"+
    "\0\250\0\u1f80\0\u1fb8\0\u1ff0\0\u2028\0\u2060\0\u2098\0\u20d0"+
    "\0\u2108\0\u2140\0\u2178\0\u21b0\0\u21e8\0\u2220\0\u2258\0\u2290"+
    "\0\u22c8\0\u2300\0\u2338\0\u2370\0\u23a8\0\u23e0\0\u2418\0\u2450"+
    "\0\u2488\0\u24c0\0\u24f8\0\u2530\0\u2568\0\u25a0\0\u25d8\0\u2610"+
    "\0\u2648\0\u2680\0\u26b8\0\u26f0\0\u2728\0\u2760\0\u2798\0\u27d0"+
    "\0\u2808\0\u2840\0\u2878\0\u28b0\0\u28e8\0\u2920\0\u2958\0\u2990"+
    "\0\u29c8\0\u2a00\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0\0\u2b18\0\250"+
    "\0\u2b50\0\u2b88\0\u2bc0\0\250\0\u2bf8\0\u2c30\0\u2c68\0\u2ca0"+
    "\0\u2cd8\0\u2d10\0\250\0\u2d48\0\u2d80\0\u2db8\0\u2df0\0\u2e28"+
    "\0\u2e60\0\u2e98\0\250\0\u2ed0\0\u2f08\0\u2f40\0\u2f78\0\u2fb0"+
    "\0\u2fe8\0\u3020\0\u3058\0\u3090\0\u30c8\0\u3100\0\u3138\0\u3170"+
    "\0\u31a8\0\u31e0\0\u3218\0\u3250\0\u3288\0\u32c0\0\u32f8\0\70"+
    "\0\u3330\0\u3368\0\u33a0\0\u33d8\0\u3410\0\u3448\0\u3480\0\u34b8"+
    "\0\u34f0\0\u3528\0\u3560\0\u3598\0\u35d0\0\u3608\0\70\0\u3640"+
    "\0\u3678\0\u36b0\0\u36e8\0\u3720\0\u3758\0\u3790\0\u37c8\0\u3800"+
    "\0\u3838\0\u3870\0\70\0\u38a8\0\u38e0\0\u3918\0\u3950\0\u3988"+
    "\0\u39c0\0\u39f8\0\u3a30\0\u3a68\0\u3aa0\0\u3ad8\0\u3b10\0\70"+
    "\0\u3b48\0\u3b80\0\u3bb8\0\u3bf0\0\u3c28\0\u3c60\0\u3c98\0\u3cd0"+
    "\0\u3d08\0\u3d40\0\u3d78\0\u3db0\0\u3de8\0\u3e20\0\u3e58\0\u3e90"+
    "\0\u3ec8\0\u3f00\0\u3f38\0\u3f70\0\u3fa8\0\u3fe0\0\u4018\0\70"+
    "\0\u4050\0\u4088\0\u40c0\0\u40f8\0\u4130\0\u4168\0\u41a0\0\u41d8"+
    "\0\u4210\0\70\0\u4248\0\u4280\0\u42b8\0\u42f0\0\70\0\u4328"+
    "\0\u4360\0\u4398\0\u43d0\0\u4408\0\u4440\0\u4478\0\u44b0\0\u44e8"+
    "\0\u4520\0\u4558\0\u4590\0\u45c8\0\u4600\0\u4638\0\u4670\0\u46a8"+
    "\0\u46e0\0\u4718\0\u4750\0\u4788\0\u47c0\0\u47f8\0\u4830\0\u4868"+
    "\0\u48a0\0\u48d8\0\u4910\0\u4948\0\70\0\u4980\0\u49b8\0\u49f0"+
    "\0\u4a28\0\u4a60\0\u4a98\0\70\0\70\0\u4ad0\0\u4b08\0\70"+
    "\0\u4b40\0\u4b78\0\70\0\70\0\70\0\u4bb0\0\70";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[383];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\2\1\4\1\5\1\6\12\7\2\2"+
    "\6\7\1\2\1\7\1\10\1\11\1\12\1\13\3\7"+
    "\1\14\1\15\1\16\1\17\1\7\1\20\1\21\1\7"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\3\7\100\0\1\34\6\0\1\35\1\0"+
    "\1\36\1\0\1\37\47\0\1\40\4\0\12\41\2\0"+
    "\6\41\1\0\21\41\1\42\1\0\2\41\5\0\3\41"+
    "\3\0\1\40\4\0\12\41\2\0\6\41\1\0\2\41"+
    "\1\43\7\41\1\44\6\41\1\42\1\0\2\41\5\0"+
    "\1\45\2\41\3\0\1\40\4\0\12\41\2\0\6\41"+
    "\1\0\4\41\1\46\6\41\1\47\5\41\1\42\1\0"+
    "\2\41\5\0\3\41\3\0\1\40\4\0\12\41\2\0"+
    "\6\41\1\0\4\41\1\50\14\41\1\42\1\0\2\41"+
    "\5\0\3\41\3\0\1\40\4\0\12\41\2\0\6\41"+
    "\1\0\3\41\1\51\10\41\1\52\4\41\1\42\1\0"+
    "\1\53\1\41\5\0\3\41\3\0\1\40\4\0\12\41"+
    "\2\0\6\41\1\0\5\41\1\54\3\41\1\55\7\41"+
    "\1\42\1\0\2\41\5\0\3\41\3\0\1\40\4\0"+
    "\12\41\2\0\6\41\1\0\6\41\1\56\5\41\1\57"+
    "\4\41\1\42\1\0\2\41\5\0\3\41\3\0\1\40"+
    "\4\0\12\41\2\0\6\41\1\0\1\41\1\60\2\41"+
    "\1\61\3\41\1\62\10\41\1\42\1\0\2\41\5\0"+
    "\3\41\3\0\1\40\4\0\12\41\2\0\6\41\1\0"+
    "\5\41\1\63\13\41\1\42\1\0\2\41\5\0\3\41"+
    "\3\0\1\40\4\0\12\41\2\0\6\41\1\0\1\41"+
    "\1\64\2\41\1\65\14\41\1\42\1\0\1\66\1\41"+
    "\5\0\3\41\3\0\1\40\4\0\12\41\2\0\6\41"+
    "\1\0\1\41\1\67\17\41\1\42\1\0\2\41\5\0"+
    "\3\41\3\0\1\40\4\0\12\41\2\0\6\41\1\0"+
    "\6\41\1\70\2\41\1\71\7\41\1\42\1\0\2\41"+
    "\5\0\3\41\54\0\1\72\16\0\1\40\4\0\12\41"+
    "\2\0\6\41\1\0\1\41\1\73\1\74\2\41\1\75"+
    "\13\41\1\42\1\0\2\41\5\0\3\41\3\0\1\40"+
    "\4\0\12\41\2\0\6\41\1\0\1\41\1\76\17\41"+
    "\1\42\1\0\2\41\5\0\3\41\11\0\1\77\74\0"+
    "\1\100\75\0\1\101\53\0\1\102\6\0\1\103\1\0"+
    "\1\104\51\0\1\40\67\0\1\40\4\0\12\41\2\0"+
    "\6\41\1\0\3\41\1\105\5\41\1\62\7\41\1\42"+
    "\1\0\2\41\5\0\3\41\3\0\1\40\4\0\12\41"+
    "\2\0\6\41\1\0\1\41\1\106\2\41\1\107\14\41"+
    "\1\42\1\0\2\41\5\0\3\41\3\0\1\40\4\0"+
    "\12\41\2\0\6\41\1\0\1\41\1\110\17\41\1\42"+
    "\1\0\2\41\5\0\3\41\3\0\1\40\4\0\12\41"+
    "\2\0\6\41\1\0\15\41\1\111\3\41\1\42\1\0"+
    "\2\41\5\0\3\41\3\0\1\40\4\0\12\41\2\0"+
    "\6\41\1\0\4\41\1\112\14\41\1\42\1\0\2\41"+
    "\5\0\3\41\3\0\1\40\4\0\12\41\2\0\6\41"+
    "\1\0\10\41\1\113\10\41\1\42\1\0\2\41\5\0"+
    "\3\41\3\0\1\40\4\0\12\41\2\0\6\41\1\0"+
    "\3\41\1\114\1\115\4\41\1\116\7\41\1\42\1\0"+
    "\2\41\5\0\3\41\3\0\1\40\4\0\12\41\2\0"+
    "\6\41\1\0\12\41\1\117\6\41\1\42\1\0\2\41"+
    "\5\0\3\41\3\0\1\40\4\0\12\41\2\0\6\41"+
    "\1\0\21\41\1\42\1\0\1\120\1\41\5\0\3\41"+
    "\3\0\1\40\4\0\12\41\2\0\6\41\1\0\21\41"+
    "\1\42\1\0\1\41\1\121\5\0\3\41\3\0\1\40"+
    "\4\0\12\41\2\0\6\41\1\0\3\41\1\122\15\41"+
    "\1\42\1\0\2\41\5\0\3\41\3\0\1\40\4\0"+
    "\12\41\2\0\6\41\1\0\21\41\1\42\1\0\1\41"+
    "\1\123\5\0\3\41\3\0\1\40\4\0\12\41\2\0"+
    "\6\41\1\0\10\41\1\124\10\41\1\42\1\0\2\41"+
    "\5\0\3\41\3\0\1\40\4\0\12\41\2\0\6\41"+
    "\1\0\3\41\1\125\15\41\1\42\1\0\2\41\5\0"+
    "\3\41\3\0\1\40\4\0\12\41\2\0\6\41\1\0"+
    "\16\41\1\126\2\41\1\42\1\0\2\41\5\0\1\41"+
    "\1\127\1\41\3\0\1\40\4\0\12\41\2\0\6\41"+
    "\1\0\15\41\1\62\3\41\1\42\1\0\2\41\5\0"+
    "\3\41\3\0\1\40\4\0\12\41\2\0\6\41\1\0"+
    "\6\41\1\130\10\41\1\131\1\41\1\42\1\0\2\41"+
    "\5\0\3\41\3\0\1\40\4\0\12\41\2\0\6\41"+
    "\1\0\5\41\1\132\13\41\1\42\1\0\2\41\5\0"+
    "\3\41\3\0\1\40\4\0\12\41\2\0\6\41\1\0"+
    "\5\41\1\62\13\41\1\42\1\0\2\41\5\0\3\41"+
    "\3\0\1\40\4\0\12\41\2\0\6\41\1\0\21\41"+
    "\1\42\1\0\1\133\1\41\5\0\3\41\3\0\1\40"+
    "\4\0\12\41\2\0\6\41\1\0\11\41\1\134\7\41"+
    "\1\42\1\0\2\41\5\0\3\41\3\0\1\40\4\0"+
    "\12\41\2\0\6\41\1\0\6\41\1\135\5\41\1\136"+
    "\4\41\1\42\1\0\2\41\5\0\3\41\3\0\1\40"+
    "\4\0\12\41\2\0\6\41\1\0\2\41\1\137\16\41"+
    "\1\42\1\0\2\41\5\0\3\41\3\0\1\40\4\0"+
    "\12\41\2\0\6\41\1\0\1\41\1\140\17\41\1\42"+
    "\1\0\2\41\5\0\3\41\3\0\1\40\4\0\12\41"+
    "\2\0\6\41\1\0\17\41\1\141\1\41\1\42\1\0"+
    "\2\41\5\0\3\41\3\0\1\40\4\0\12\41\2\0"+
    "\6\41\1\0\15\41\1\142\1\66\2\41\1\42\1\0"+
    "\2\41\5\0\3\41\12\0\1\143\101\0\1\144\61\0"+
    "\1\145\62\0\1\146\74\0\1\147\75\0\1\150\46\0"+
    "\1\40\4\0\12\41\2\0\6\41\1\0\4\41\1\151"+
    "\14\41\1\42\1\0\2\41\5\0\3\41\3\0\1\40"+
    "\4\0\12\41\2\0\6\41\1\0\5\41\1\152\13\41"+
    "\1\42\1\0\2\41\5\0\3\41\3\0\1\40\4\0"+
    "\12\41\2\0\6\41\1\0\12\41\1\62\6\41\1\42"+
    "\1\0\2\41\5\0\3\41\3\0\1\40\4\0\12\41"+
    "\2\0\6\41\1\0\2\41\1\153\16\41\1\42\1\0"+
    "\2\41\5\0\3\41\3\0\1\40\4\0\12\41\2\0"+
    "\6\41\1\0\1\41\1\154\17\41\1\42\1\0\2\41"+
    "\5\0\3\41\3\0\1\40\4\0\12\41\2\0\6\41"+
    "\1\0\14\41\1\155\4\41\1\42\1\0\2\41\5\0"+
    "\3\41\3\0\1\40\4\0\12\41\2\0\6\41\1\0"+
    "\1\41\1\156\17\41\1\42\1\0\2\41\5\0\3\41"+
    "\3\0\1\40\4\0\12\41\2\0\6\41\1\0\14\41"+
    "\1\157\4\41\1\42\1\0\2\41\5\0\3\41\3\0"+
    "\1\40\4\0\12\41\2\0\6\41\1\0\6\41\1\160"+
    "\12\41\1\42\1\0\2\41\5\0\3\41\3\0\1\40"+
    "\4\0\12\41\2\0\6\41\1\0\6\41\1\161\12\41"+
    "\1\42\1\0\2\41\5\0\3\41\3\0\1\40\4\0"+
    "\12\41\2\0\6\41\1\0\6\41\1\162\12\41\1\42"+
    "\1\0\2\41\5\0\3\41\3\0\1\40\4\0\12\41"+
    "\2\0\6\41\1\0\11\41\1\163\7\41\1\42\1\0"+
    "\2\41\5\0\3\41\3\0\1\40\4\0\12\41\2\0"+
    "\6\41\1\0\1\41\1\164\17\41\1\42\1\0\2\41"+
    "\5\0\3\41\3\0\1\40\4\0\12\41\2\0\6\41"+
    "\1\0\1\41\1\165\17\41\1\42\1\0\2\41\5\0"+
    "\3\41\3\0\1\40\4\0\12\41\2\0\6\41\1\0"+
    "\5\41\1\166\13\41\1\42\1\0\2\41\5\0\3\41"+
    "\3\0\1\40\4\0\12\41\2\0\6\41\1\0\1\41"+
    "\1\167\4\41\1\170\12\41\1\42\1\0\2\41\5\0"+
    "\3\41\3\0\1\40\4\0\12\41\2\0\6\41\1\0"+
    "\1\41\1\171\17\41\1\42\1\0\2\41\5\0\3\41"+
    "\3\0\1\40\4\0\12\41\2\0\6\41\1\0\5\41"+
    "\1\172\13\41\1\42\1\0\2\41\5\0\3\41\3\0"+
    "\1\40\4\0\12\41\2\0\6\41\1\0\3\41\1\173"+
    "\15\41\1\42\1\0\2\41\5\0\3\41\3\0\1\40"+
    "\4\0\12\41\2\0\6\41\1\0\16\41\1\174\2\41"+
    "\1\42\1\0\2\41\5\0\3\41\3\0\1\40\4\0"+
    "\12\41\2\0\6\41\1\0\1\41\1\175\17\41\1\42"+
    "\1\0\2\41\5\0\3\41\3\0\1\40\4\0\12\41"+
    "\2\0\6\41\1\0\6\41\1\176\3\41\1\177\6\41"+
    "\1\42\1\0\2\41\5\0\3\41\3\0\1\40\4\0"+
    "\12\41\2\0\6\41\1\0\21\41\1\42\1\0\1\200"+
    "\1\41\5\0\3\41\3\0\1\40\4\0\12\41\2\0"+
    "\6\41\1\0\7\41\1\201\11\41\1\42\1\0\2\41"+
    "\5\0\3\41\3\0\1\40\4\0\12\41\2\0\6\41"+
    "\1\0\12\41\1\202\6\41\1\42\1\0\2\41\5\0"+
    "\3\41\3\0\1\40\4\0\12\41\2\0\6\41\1\0"+
    "\6\41\1\203\12\41\1\42\1\0\2\41\5\0\3\41"+
    "\3\0\1\40\4\0\12\41\2\0\6\41\1\0\13\41"+
    "\1\204\5\41\1\42\1\0\2\41\5\0\3\41\3\0"+
    "\1\40\4\0\12\41\2\0\6\41\1\0\17\41\1\205"+
    "\1\41\1\42\1\0\2\41\5\0\3\41\3\0\1\40"+
    "\4\0\12\41\2\0\6\41\1\0\11\41\1\206\7\41"+
    "\1\42\1\0\2\41\5\0\3\41\3\0\1\40\4\0"+
    "\12\41\2\0\6\41\1\0\5\41\1\207\13\41\1\42"+
    "\1\0\2\41\5\0\3\41\13\0\1\210\101\0\1\211"+
    "\72\0\1\212\51\0\1\213\101\0\1\214\61\0\1\215"+
    "\54\0\1\40\4\0\12\41\2\0\6\41\1\0\5\41"+
    "\1\216\13\41\1\42\1\0\2\41\5\0\3\41\3\0"+
    "\1\40\4\0\12\41\2\0\6\41\1\0\17\41\1\217"+
    "\1\41\1\42\1\0\2\41\5\0\3\41\3\0\1\40"+
    "\4\0\12\41\2\0\6\41\1\0\14\41\1\220\4\41"+
    "\1\42\1\0\2\41\5\0\3\41\3\0\1\40\4\0"+
    "\12\41\2\0\6\41\1\0\12\41\1\221\6\41\1\42"+
    "\1\0\2\41\5\0\3\41\3\0\1\40\4\0\12\41"+
    "\2\0\6\41\1\0\15\41\1\222\3\41\1\42\1\0"+
    "\2\41\5\0\3\41\3\0\1\40\1\223\3\0\12\41"+
    "\2\0\6\41\1\0\21\41\1\42\1\0\2\41\5\0"+
    "\3\41\3\0\1\40\4\0\12\41\2\0\6\41\1\0"+
    "\16\41\1\224\2\41\1\42\1\0\2\41\5\0\3\41"+
    "\3\0\1\40\4\0\12\41\2\0\6\41\1\0\16\41"+
    "\1\225\2\41\1\42\1\0\2\41\5\0\3\41\3\0"+
    "\1\40\4\0\12\41\2\0\6\41\1\0\21\41\1\42"+
    "\1\0\1\62\1\41\5\0\3\41\3\0\1\40\4\0"+
    "\12\41\2\0\6\41\1\0\1\41\1\226\17\41\1\42"+
    "\1\0\2\41\5\0\3\41\3\0\1\40\4\0\12\41"+
    "\2\0\6\41\1\0\2\41\1\227\16\41\1\42\1\0"+
    "\2\41\5\0\3\41\3\0\1\40\4\0\12\41\2\0"+
    "\6\41\1\0\11\41\1\230\7\41\1\42\1\0\2\41"+
    "\5\0\3\41\3\0\1\40\4\0\12\41\2\0\6\41"+
    "\1\0\12\41\1\231\6\41\1\42\1\0\2\41\5\0"+
    "\3\41\3\0\1\40\4\0\12\41\2\0\6\41\1\0"+
    "\17\41\1\232\1\41\1\42\1\0\2\41\5\0\3\41"+
    "\3\0\1\40\4\0\12\41\2\0\6\41\1\0\6\41"+
    "\1\107\12\41\1\42\1\0\2\41\5\0\3\41\3\0"+
    "\1\40\4\0\12\41\2\0\6\41\1\0\5\41\1\233"+
    "\13\41\1\42\1\0\2\41\5\0\3\41\3\0\1\40"+
    "\4\0\12\41\2\0\6\41\1\0\20\41\1\234\1\42"+
    "\1\0\2\41\5\0\3\41\3\0\1\40\4\0\12\41"+
    "\2\0\6\41\1\0\21\41\1\42\1\0\1\235\1\41"+
    "\5\0\3\41\3\0\1\40\4\0\12\41\2\0\6\41"+
    "\1\0\1\41\1\236\17\41\1\42\1\0\2\41\5\0"+
    "\3\41\3\0\1\40\4\0\12\41\2\0\6\41\1\0"+
    "\1\41\1\237\17\41\1\42\1\0\2\41\5\0\3\41"+
    "\3\0\1\40\4\0\12\41\2\0\6\41\1\0\12\41"+
    "\1\240\6\41\1\42\1\0\2\41\5\0\3\41\3\0"+
    "\1\40\4\0\12\41\2\0\6\41\1\0\1\41\1\241"+
    "\17\41\1\42\1\0\2\41\5\0\3\41\3\0\1\40"+
    "\4\0\12\41\2\0\6\41\1\0\4\41\1\242\14\41"+
    "\1\42\1\0\2\41\5\0\3\41\3\0\1\40\4\0"+
    "\12\41\2\0\6\41\1\0\6\41\1\243\12\41\1\42"+
    "\1\0\2\41\5\0\3\41\3\0\1\40\4\0\12\41"+
    "\2\0\6\41\1\0\4\41\1\244\14\41\1\42\1\0"+
    "\2\41\5\0\3\41\3\0\1\40\4\0\12\41\2\0"+
    "\6\41\1\0\12\41\1\245\6\41\1\42\1\0\2\41"+
    "\5\0\3\41\3\0\1\40\4\0\12\41\2\0\6\41"+
    "\1\0\1\41\1\246\17\41\1\42\1\0\2\41\5\0"+
    "\3\41\3\0\1\40\4\0\12\41\2\0\6\41\1\0"+
    "\4\41\1\247\14\41\1\42\1\0\2\41\5\0\3\41"+
    "\3\0\1\40\4\0\12\41\2\0\6\41\1\0\17\41"+
    "\1\62\1\41\1\42\1\0\2\41\5\0\3\41\3\0"+
    "\1\40\4\0\12\41\2\0\6\41\1\0\17\41\1\250"+
    "\1\41\1\42\1\0\2\41\5\0\3\41\11\0\1\251"+
    "\72\0\1\252\67\0\1\253\66\0\1\254\101\0\1\255"+
    "\72\0\1\256\42\0\1\40\4\0\12\41\2\0\6\41"+
    "\1\0\6\41\1\257\12\41\1\42\1\0\2\41\5\0"+
    "\3\41\3\0\1\40\4\0\12\41\2\0\6\41\1\0"+
    "\12\41\1\62\6\41\1\42\1\0\1\41\1\260\5\0"+
    "\3\41\3\0\1\40\4\0\12\41\2\0\6\41\1\0"+
    "\12\41\1\261\6\41\1\42\1\0\2\41\5\0\3\41"+
    "\3\0\1\40\4\0\12\41\2\0\6\41\1\0\5\41"+
    "\1\262\13\41\1\42\1\0\2\41\5\0\3\41\3\0"+
    "\1\40\4\0\12\41\2\0\6\41\1\0\15\41\1\257"+
    "\3\41\1\42\1\0\2\41\5\0\3\41\36\0\1\263"+
    "\4\0\1\264\27\0\1\40\4\0\12\41\2\0\6\41"+
    "\1\0\1\41\1\265\17\41\1\42\1\0\2\41\5\0"+
    "\3\41\3\0\1\40\4\0\12\41\2\0\6\41\1\0"+
    "\1\41\1\231\17\41\1\42\1\0\2\41\5\0\3\41"+
    "\3\0\1\40\1\266\3\0\12\41\2\0\6\41\1\0"+
    "\21\41\1\42\1\0\2\41\5\0\3\41\3\0\1\40"+
    "\4\0\12\41\2\0\6\41\1\0\5\41\1\267\13\41"+
    "\1\42\1\0\2\41\5\0\3\41\3\0\1\40\1\270"+
    "\3\0\12\41\2\0\6\41\1\0\21\41\1\42\1\0"+
    "\2\41\5\0\3\41\3\0\1\40\4\0\12\41\2\0"+
    "\6\41\1\0\4\41\1\271\14\41\1\42\1\0\2\41"+
    "\5\0\3\41\3\0\1\40\4\0\12\41\2\0\6\41"+
    "\1\0\6\41\1\272\12\41\1\42\1\0\2\41\5\0"+
    "\3\41\3\0\1\40\4\0\12\41\2\0\6\41\1\0"+
    "\13\41\1\273\5\41\1\42\1\0\2\41\5\0\3\41"+
    "\3\0\1\40\4\0\12\41\2\0\6\41\1\0\1\41"+
    "\1\274\17\41\1\42\1\0\2\41\5\0\3\41\3\0"+
    "\1\40\4\0\12\41\2\0\6\41\1\0\12\41\1\275"+
    "\6\41\1\42\1\0\2\41\5\0\3\41\3\0\1\40"+
    "\4\0\12\41\2\0\6\41\1\0\6\41\1\225\12\41"+
    "\1\42\1\0\2\41\5\0\3\41\3\0\1\40\4\0"+
    "\12\41\2\0\6\41\1\0\7\41\1\276\11\41\1\42"+
    "\1\0\2\41\5\0\3\41\3\0\1\40\4\0\12\41"+
    "\2\0\6\41\1\0\4\41\1\277\14\41\1\42\1\0"+
    "\2\41\5\0\3\41\3\0\1\40\4\0\12\41\2\0"+
    "\6\41\1\0\5\41\1\300\13\41\1\42\1\0\2\41"+
    "\5\0\3\41\3\0\1\40\4\0\12\41\2\0\6\41"+
    "\1\0\11\41\1\301\7\41\1\42\1\0\2\41\5\0"+
    "\3\41\3\0\1\40\1\302\3\0\12\41\2\0\6\41"+
    "\1\0\21\41\1\42\1\0\2\41\5\0\3\41\3\0"+
    "\1\40\4\0\12\41\2\0\6\41\1\0\6\41\1\303"+
    "\12\41\1\42\1\0\2\41\5\0\3\41\3\0\1\40"+
    "\4\0\12\41\2\0\6\41\1\0\5\41\1\304\13\41"+
    "\1\42\1\0\2\41\5\0\3\41\14\0\1\305\64\0"+
    "\1\306\67\0\1\307\67\0\1\310\72\0\1\311\67\0"+
    "\1\312\56\0\1\40\4\0\12\41\2\0\6\41\1\0"+
    "\4\41\1\313\14\41\1\42\1\0\2\41\5\0\3\41"+
    "\3\0\1\40\4\0\12\41\2\0\6\41\1\0\6\41"+
    "\1\314\12\41\1\42\1\0\2\41\5\0\3\41\3\0"+
    "\1\40\4\0\12\41\2\0\6\41\1\0\1\41\1\315"+
    "\17\41\1\42\1\0\2\41\5\0\3\41\3\0\1\40"+
    "\4\0\12\41\2\0\6\41\1\0\1\41\1\316\17\41"+
    "\1\42\1\0\2\41\5\0\3\41\40\0\1\317\66\0"+
    "\1\320\33\0\1\40\4\0\12\41\2\0\6\41\1\0"+
    "\6\41\1\321\12\41\1\42\1\0\2\41\5\0\3\41"+
    "\37\0\1\322\33\0\1\40\4\0\12\41\2\0\6\41"+
    "\1\0\1\41\1\323\17\41\1\42\1\0\2\41\5\0"+
    "\3\41\53\0\1\324\17\0\1\40\4\0\12\41\2\0"+
    "\6\41\1\0\12\41\1\325\6\41\1\42\1\0\2\41"+
    "\5\0\3\41\3\0\1\40\1\326\3\0\12\41\2\0"+
    "\6\41\1\0\21\41\1\42\1\0\2\41\5\0\3\41"+
    "\3\0\1\40\4\0\12\41\2\0\6\41\1\0\11\41"+
    "\1\327\7\41\1\42\1\0\2\41\5\0\3\41\3\0"+
    "\1\40\4\0\12\41\2\0\6\41\1\0\6\41\1\330"+
    "\12\41\1\42\1\0\2\41\5\0\3\41\3\0\1\40"+
    "\4\0\12\41\2\0\6\41\1\0\12\41\1\276\6\41"+
    "\1\42\1\0\2\41\5\0\3\41\3\0\1\40\4\0"+
    "\12\41\2\0\6\41\1\0\1\41\1\62\17\41\1\42"+
    "\1\0\2\41\5\0\3\41\3\0\1\40\4\0\12\41"+
    "\2\0\6\41\1\0\16\41\1\331\2\41\1\42\1\0"+
    "\2\41\5\0\3\41\3\0\1\40\4\0\12\41\2\0"+
    "\6\41\1\0\3\41\1\62\15\41\1\42\1\0\2\41"+
    "\5\0\3\41\3\0\1\40\4\0\12\41\2\0\6\41"+
    "\1\0\14\41\1\332\4\41\1\42\1\0\2\41\5\0"+
    "\3\41\36\0\1\263\34\0\1\40\4\0\12\41\2\0"+
    "\6\41\1\0\5\41\1\333\13\41\1\42\1\0\2\41"+
    "\5\0\3\41\3\0\1\40\4\0\12\41\2\0\6\41"+
    "\1\0\6\41\1\334\12\41\1\42\1\0\2\41\5\0"+
    "\3\41\15\0\1\335\66\0\1\336\102\0\1\337\54\0"+
    "\1\340\64\0\1\341\67\0\1\342\61\0\1\40\4\0"+
    "\12\41\2\0\6\41\1\0\7\41\1\225\11\41\1\42"+
    "\1\0\2\41\5\0\3\41\3\0\1\40\4\0\12\41"+
    "\2\0\6\41\1\0\1\41\1\330\17\41\1\42\1\0"+
    "\2\41\5\0\3\41\3\0\1\40\4\0\12\41\2\0"+
    "\6\41\1\0\6\41\1\343\12\41\1\42\1\0\2\41"+
    "\5\0\3\41\3\0\1\40\4\0\12\41\2\0\6\41"+
    "\1\0\6\41\1\276\12\41\1\42\1\0\2\41\5\0"+
    "\3\41\52\0\1\344\55\0\1\345\32\0\1\40\1\346"+
    "\3\0\12\41\2\0\6\41\1\0\21\41\1\42\1\0"+
    "\2\41\5\0\3\41\53\0\1\347\17\0\1\40\4\0"+
    "\12\41\2\0\6\41\1\0\6\41\1\62\12\41\1\42"+
    "\1\0\2\41\5\0\3\41\41\0\1\350\31\0\1\40"+
    "\4\0\12\41\2\0\6\41\1\0\1\41\1\351\17\41"+
    "\1\42\1\0\2\41\5\0\3\41\53\0\1\352\17\0"+
    "\1\40\4\0\12\41\2\0\6\41\1\0\17\41\1\276"+
    "\1\41\1\42\1\0\2\41\5\0\3\41\3\0\1\40"+
    "\4\0\12\41\2\0\6\41\1\0\16\41\1\267\2\41"+
    "\1\42\1\0\2\41\5\0\3\41\3\0\1\40\4\0"+
    "\12\41\2\0\6\41\1\0\12\41\1\353\6\41\1\42"+
    "\1\0\2\41\5\0\3\41\3\0\1\40\4\0\12\41"+
    "\2\0\6\41\1\0\11\41\1\354\7\41\1\42\1\0"+
    "\2\41\5\0\3\41\15\0\1\355\100\0\1\356\53\0"+
    "\1\357\72\0\1\360\66\0\1\361\102\0\1\362\102\0"+
    "\1\363\103\0\1\364\45\0\1\365\16\0\1\352\67\0"+
    "\1\366\60\0\1\367\26\0\1\40\4\0\12\41\2\0"+
    "\6\41\1\0\14\41\1\323\4\41\1\42\1\0\2\41"+
    "\5\0\3\41\37\0\1\370\33\0\1\40\1\371\3\0"+
    "\12\41\2\0\6\41\1\0\21\41\1\42\1\0\2\41"+
    "\5\0\3\41\16\0\1\372\100\0\1\373\72\0\1\374"+
    "\52\0\1\375\100\0\1\376\53\0\1\377\111\0\1\u0100"+
    "\111\0\1\u0101\46\0\1\u0102\71\0\1\u0103\117\0\1\u0100"+
    "\41\0\1\u0104\66\0\1\u0105\33\0\1\u0106\75\0\1\u0107"+
    "\65\0\12\u0108\2\0\6\u0108\1\0\21\u0108\2\0\2\u0108"+
    "\5\0\3\u0108\16\0\1\u0109\100\0\1\u010a\72\0\1\u010b"+
    "\71\0\1\u010c\77\0\1\u0100\64\0\1\u010d\73\0\1\u010e"+
    "\101\0\1\u010f\27\0\1\u0110\100\0\1\u0111\42\0\1\u0112"+
    "\4\0\12\u0108\2\0\6\u0108\1\0\21\u0108\2\0\2\u0108"+
    "\5\0\3\u0108\4\0\1\u0113\75\0\1\u0114\65\0\12\u0115"+
    "\2\0\6\u0115\1\0\21\u0115\2\0\2\u0115\5\0\3\u0115"+
    "\36\0\1\u0116\65\0\1\u0117\73\0\1\u0118\41\0\1\u0119"+
    "\61\0\1\u011a\66\0\1\u0112\16\0\1\u011b\64\0\1\u011c"+
    "\100\0\1\u011d\42\0\1\u011e\4\0\12\u0115\2\0\6\u0115"+
    "\1\0\21\u0115\2\0\2\u0115\5\0\3\u0115\36\0\1\363"+
    "\71\0\1\u011f\63\0\1\u0120\50\0\1\u0121\66\0\1\u0122"+
    "\4\0\1\u0123\2\0\1\u0124\2\0\1\u0125\52\0\1\u0126"+
    "\61\0\1\u0127\66\0\1\u011e\16\0\1\u0128\103\0\1\u0129"+
    "\67\0\1\u0100\51\0\1\u012a\57\0\1\u012b\103\0\1\u012c"+
    "\55\0\1\u012d\105\0\1\u012e\54\0\1\u012f\66\0\1\u0130"+
    "\4\0\1\u0131\2\0\1\u0132\2\0\1\u0133\42\0\1\u0134"+
    "\106\0\1\u0135\56\0\1\u0136\75\0\1\u0137\66\0\1\u0138"+
    "\100\0\1\u0139\61\0\1\u013a\57\0\1\u013b\103\0\1\u013c"+
    "\55\0\1\u013d\105\0\1\u013e\47\0\12\u013f\2\0\6\u013f"+
    "\1\0\21\u013f\2\0\2\u013f\5\0\3\u013f\22\0\1\u0140"+
    "\61\0\1\u0141\103\0\1\u0142\54\0\1\u0143\70\0\1\u0144"+
    "\72\0\1\u0145\56\0\1\u0146\75\0\1\u0147\66\0\1\u0148"+
    "\100\0\1\u0149\47\0\1\u014a\1\0\12\u013f\2\0\6\u013f"+
    "\1\0\21\u013f\2\0\2\u013f\5\0\3\u013f\11\0\1\u014b"+
    "\72\0\1\u014c\67\0\1\u014d\64\0\1\u014e\100\0\1\u014f"+
    "\61\0\1\u0150\103\0\1\u0151\54\0\1\u0152\70\0\1\u0153"+
    "\67\0\1\u0154\62\0\1\u0155\106\0\1\u0156\70\0\1\u0157"+
    "\47\0\1\u0158\72\0\1\u0159\67\0\1\u015a\64\0\1\u015b"+
    "\105\0\1\u015c\67\0\1\u015d\57\0\1\u015e\64\0\1\u015f"+
    "\71\0\1\u0160\62\0\1\u0161\106\0\1\u0162\70\0\1\u0163"+
    "\63\0\1\u0164\71\0\1\u0165\56\0\1\u0166\75\0\1\u0167"+
    "\72\0\1\u0168\67\0\1\u0169\57\0\1\u016a\64\0\1\u016b"+
    "\74\0\1\u016c\70\0\1\u016d\66\0\1\u016e\64\0\1\u016f"+
    "\76\0\1\u0170\71\0\1\u0171\56\0\1\u0172\75\0\1\u0173"+
    "\65\0\1\u0174\67\0\1\u0175\66\0\1\u0176\67\0\1\u0177"+
    "\70\0\1\u0178\66\0\1\u0179\64\0\1\u017a\73\0\1\u017b"+
    "\67\0\1\u017c\67\0\1\u017d\66\0\1\u017e\70\0\1\u017f"+
    "\46\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19432];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\4\11\16\1\1\11\2\1\5\11\4\0\1\1"+
    "\1\0\1\11\17\0\1\1\7\0\1\11\2\0\1\1"+
    "\101\0\1\1\31\0\1\1\5\0\1\1\1\0\1\1"+
    "\23\0\1\1\4\0\1\1\26\0\1\1\6\0\1\1"+
    "\3\0\1\1\6\0\1\1\7\0\1\1\24\0\1\11"+
    "\16\0\1\11\13\0\1\11\14\0\1\11\27\0\1\11"+
    "\11\0\1\11\4\0\1\11\35\0\1\11\6\0\2\11"+
    "\2\0\1\11\2\0\3\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[383];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 196) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            } 
            // fall through
          case 36: break;
          case 2: 
            { return new Symbol(sym.PO);
            } 
            // fall through
          case 37: break;
          case 3: 
            { return new Symbol(sym.VG);
            } 
            // fall through
          case 38: break;
          case 4: 
            { return new Symbol(sym.PF);
            } 
            // fall through
          case 39: break;
          case 5: 
            { return new Symbol(sym.H);
            } 
            // fall through
          case 40: break;
          case 6: 
            { return new Symbol(sym.DP);
            } 
            // fall through
          case 41: break;
          case 7: 
            { return new Symbol(sym.PV);
            } 
            // fall through
          case 42: break;
          case 8: 
            { return new Symbol(sym.PT);
            } 
            // fall through
          case 43: break;
          case 9: 
            { return new Symbol(sym.AO);
            } 
            // fall through
          case 44: break;
          case 10: 
            { return new Symbol(sym.AF);
            } 
            // fall through
          case 45: break;
          case 11: 
            { return new Symbol(sym.ID);
            } 
            // fall through
          case 46: break;
          case 12: 
            { return new Symbol(sym.ENS);
            } 
            // fall through
          case 47: break;
          case 13: 
            { return new Symbol(sym.b);
            } 
            // fall through
          case 48: break;
          case 14: 
            { return new Symbol(sym.EGAL);
            } 
            // fall through
          case 49: break;
          case 15: 
            { return new Symbol(sym.Done);
            } 
            // fall through
          case 50: break;
          case 16: 
            { return new Symbol(sym.TYPE, new String(yytext()));
            } 
            // fall through
          case 51: break;
          case 17: 
            { return new Symbol(sym.DO);
            } 
            // fall through
          case 52: break;
          case 18: 
            { return new Symbol(sym.Action);
            } 
            // fall through
          case 53: break;
          case 19: 
            { return new Symbol(sym.DEF);
            } 
            // fall through
          case 54: break;
          case 20: 
            { return new Symbol(sym.EXE);
            } 
            // fall through
          case 55: break;
          case 21: 
            { return new Symbol(sym.Loop);
            } 
            // fall through
          case 56: break;
          case 22: 
            { return new Symbol(sym.scenario_id);
            } 
            // fall through
          case 57: break;
          case 23: 
            { return new Symbol(sym.DSCO);
            } 
            // fall through
          case 58: break;
          case 24: 
            { return new Symbol(sym.DSCF);
            } 
            // fall through
          case 59: break;
          case 25: 
            { return new Symbol(sym.PDO);
            } 
            // fall through
          case 60: break;
          case 26: 
            { return new Symbol(sym.TYPEAUTRE);
            } 
            // fall through
          case 61: break;
          case 27: 
            { return new Symbol(sym.PDF);
            } 
            // fall through
          case 62: break;
          case 28: 
            { return new Symbol(sym.DSO);
            } 
            // fall through
          case 63: break;
          case 29: 
            { return new Symbol(sym.DAO);
            } 
            // fall through
          case 64: break;
          case 30: 
            { return new Symbol(sym.DCO);
            } 
            // fall through
          case 65: break;
          case 31: 
            { return new Symbol(sym.DSF);
            } 
            // fall through
          case 66: break;
          case 32: 
            { return new Symbol(sym.DIO);
            } 
            // fall through
          case 67: break;
          case 33: 
            { return new Symbol(sym.DAF);
            } 
            // fall through
          case 68: break;
          case 34: 
            { return new Symbol(sym.DCF);
            } 
            // fall through
          case 69: break;
          case 35: 
            { return new Symbol(sym.DIF);
            } 
            // fall through
          case 70: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
