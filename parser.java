
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java.util.*;
import java_cup.runtime.*;
import java.lang.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\024\002\000\002\025\002\000\002\026" +
    "\002\000\002\027\002\000\002\002\014\000\002\002\004" +
    "\000\002\003\005\000\002\030\002\000\002\004\007\000" +
    "\002\031\002\000\002\004\007\000\002\032\002\000\002" +
    "\004\013\000\002\004\002\000\002\005\005\000\002\033" +
    "\002\000\002\034\002\000\002\006\010\000\002\006\002" +
    "\000\002\035\002\000\002\036\002\000\002\007\015\000" +
    "\002\037\002\000\002\007\010\000\002\040\002\000\002" +
    "\007\007\000\002\041\002\000\002\042\002\000\002\043" +
    "\002\000\002\007\023\000\002\007\005\000\002\007\002" +
    "\000\002\044\002\000\002\012\005\000\002\012\002\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\013\005\000\002\045\002\000\002\017\007\000\002\017" +
    "\002\000\002\014\005\000\002\020\010\000\002\020\012" +
    "\000\002\046\002\000\002\020\013\000\002\047\002\000" +
    "\002\020\011\000\002\020\002\000\002\015\005\000\002" +
    "\015\003\000\002\021\005\000\002\021\003\000\002\021" +
    "\007\000\002\021\005\000\002\050\002\000\002\010\006" +
    "\000\002\010\003\000\002\022\006\000\002\051\002\000" +
    "\002\023\006\000\002\052\002\000\002\023\006\000\002" +
    "\023\003\000\002\023\003\000\002\053\002\000\002\023" +
    "\007\000\002\023\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\004\006\004\001\002\000\004\011\001\001" +
    "\002\000\004\002\006\001\002\000\004\002\ufffc\001\002" +
    "\000\004\011\011\001\002\000\004\013\000\001\002\000" +
    "\012\012\ufff4\043\013\044\015\045\012\001\002\000\004" +
    "\025\033\001\002\000\004\025\016\001\002\000\004\012" +
    "\026\001\002\000\004\025\016\001\002\000\010\023\uffc9" +
    "\024\uffc7\030\uffc7\001\002\000\004\024\020\001\002\000" +
    "\012\012\ufff8\043\ufff8\044\ufff8\045\ufff8\001\002\000\012" +
    "\012\ufff4\043\013\044\015\045\012\001\002\000\004\012" +
    "\ufff7\001\002\000\004\023\024\001\002\000\004\025\016" +
    "\001\002\000\006\024\uffc8\030\uffc8\001\002\000\004\013" +
    "\ufffb\001\002\000\004\024\030\001\002\000\012\012\ufffa" +
    "\043\ufffa\044\ufffa\045\ufffa\001\002\000\012\012\ufff4\043" +
    "\013\044\015\045\012\001\002\000\004\012\ufff9\001\002" +
    "\000\004\033\034\001\002\000\004\027\035\001\002\000" +
    "\004\025\016\001\002\000\004\030\037\001\002\000\004" +
    "\024\040\001\002\000\012\012\ufff6\043\ufff6\044\ufff6\045" +
    "\ufff6\001\002\000\012\012\ufff4\043\013\044\015\045\012" +
    "\001\002\000\004\012\ufff5\001\002\000\004\013\044\001" +
    "\002\000\006\014\uffd8\046\222\001\002\000\004\015\uffff" +
    "\001\002\000\004\015\047\001\002\000\006\016\uffef\021" +
    "\112\001\002\000\004\017\052\001\002\000\004\007\ufffe" +
    "\001\002\000\010\020\uffd0\047\053\050\055\001\002\000" +
    "\004\025\076\001\002\000\004\020\075\001\002\000\004" +
    "\025\056\001\002\000\004\033\057\001\002\000\006\005" +
    "\061\027\060\001\002\000\004\005\066\001\002\000\004" +
    "\024\062\001\002\000\010\020\uffd2\047\uffd2\050\uffd2\001" +
    "\002\000\010\020\uffd0\047\053\050\055\001\002\000\004" +
    "\020\uffd1\001\002\000\004\030\071\001\002\000\006\023" +
    "\067\030\uffce\001\002\000\004\005\066\001\002\000\004" +
    "\030\uffcf\001\002\000\004\024\072\001\002\000\010\020" +
    "\uffd4\047\uffd4\050\uffd4\001\002\000\010\020\uffd0\047\053" +
    "\050\055\001\002\000\004\020\uffd3\001\002\000\004\007" +
    "\uffd7\001\002\000\004\033\077\001\002\000\006\025\100" +
    "\027\101\001\002\000\004\024\106\001\002\000\004\025" +
    "\016\001\002\000\004\030\103\001\002\000\004\024\104" +
    "\001\002\000\010\020\uffd0\047\053\050\055\001\002\000" +
    "\004\020\uffd5\001\002\000\010\020\uffd0\047\053\050\055" +
    "\001\002\000\004\020\uffd6\001\002\000\004\007\111\001" +
    "\002\000\004\002\ufffd\001\002\000\016\022\ufff2\025\ufff2" +
    "\052\ufff2\053\ufff2\055\ufff2\062\ufff2\001\002\000\004\016" +
    "\114\001\002\000\004\017\ufff3\001\002\000\016\022\uffe2" +
    "\025\117\052\120\053\116\055\124\062\122\001\002\000" +
    "\004\031\203\001\002\000\004\024\176\001\002\000\004" +
    "\031\153\001\002\000\004\022\150\001\002\000\004\025" +
    "\144\001\002\000\004\036\142\001\002\000\004\025\125" +
    "\001\002\000\004\035\126\001\002\000\010\025\132\043" +
    "\127\044\131\001\002\000\004\057\uffdd\001\002\000\004" +
    "\057\uffee\001\002\000\004\057\uffdc\001\002\000\004\057" +
    "\uffde\001\002\000\004\057\134\001\002\000\016\025\117" +
    "\052\120\053\116\055\124\056\uffe2\062\122\001\002\000" +
    "\004\056\uffed\001\002\000\004\056\137\001\002\000\004" +
    "\036\140\001\002\000\024\022\uffe2\025\117\052\120\053" +
    "\116\054\uffe2\055\124\056\uffe2\061\uffe2\062\122\001\002" +
    "\000\012\022\uffec\054\uffec\056\uffec\061\uffec\001\002\000" +
    "\024\022\uffe2\025\117\052\120\053\116\054\uffe2\055\124" +
    "\056\uffe2\061\uffe2\062\122\001\002\000\012\022\uffe3\054" +
    "\uffe3\056\uffe3\061\uffe3\001\002\000\004\036\145\001\002" +
    "\000\024\022\uffe9\025\uffe9\052\uffe9\053\uffe9\054\uffe9\055" +
    "\uffe9\056\uffe9\061\uffe9\062\uffe9\001\002\000\024\022\uffe2" +
    "\025\117\052\120\053\116\054\uffe2\055\124\056\uffe2\061" +
    "\uffe2\062\122\001\002\000\012\022\uffe8\054\uffe8\056\uffe8" +
    "\061\uffe8\001\002\000\006\016\ufff1\021\ufff1\001\002\000" +
    "\006\016\uffef\021\112\001\002\000\004\016\ufff0\001\002" +
    "\000\004\025\154\001\002\000\004\024\155\001\002\000" +
    "\004\040\156\001\002\000\004\034\157\001\002\000\004" +
    "\060\160\001\002\000\004\032\uffe7\001\002\000\004\032" +
    "\162\001\002\000\004\063\163\001\002\000\020\025\117" +
    "\052\120\053\116\054\uffe2\055\124\061\uffe2\062\122\001" +
    "\002\000\006\054\uffe6\061\uffe6\001\002\000\006\054\166" +
    "\061\uffdf\001\002\000\016\025\uffe1\052\uffe1\053\uffe1\055" +
    "\uffe1\061\uffe1\062\uffe1\001\002\000\004\061\uffe5\001\002" +
    "\000\004\061\171\001\002\000\004\036\172\001\002\000" +
    "\024\022\uffe2\025\117\052\120\053\116\054\uffe2\055\124" +
    "\056\uffe2\061\uffe2\062\122\001\002\000\012\022\uffe4\054" +
    "\uffe4\056\uffe4\061\uffe4\001\002\000\016\025\117\052\120" +
    "\053\116\055\124\061\uffe2\062\122\001\002\000\004\061" +
    "\uffe0\001\002\000\004\004\177\001\002\000\004\036\uffeb" +
    "\001\002\000\004\036\201\001\002\000\024\022\uffe2\025" +
    "\117\052\120\053\116\054\uffe2\055\124\056\uffe2\061\uffe2" +
    "\062\122\001\002\000\012\022\uffea\054\uffea\056\uffea\061" +
    "\uffea\001\002\000\006\025\205\051\204\001\002\000\006" +
    "\023\uffc3\032\uffc0\001\002\000\010\023\uffc5\024\211\032" +
    "\uffc1\001\002\000\004\032\207\001\002\000\004\036\uffc6" +
    "\001\002\000\004\023\215\001\002\000\004\040\212\001" +
    "\002\000\010\025\uffbf\032\uffbd\051\uffbf\001\002\000\006" +
    "\025\205\051\204\001\002\000\004\032\uffbe\001\002\000" +
    "\006\025\205\051\204\001\002\000\004\032\uffc4\001\002" +
    "\000\004\023\220\001\002\000\006\025\205\051\204\001" +
    "\002\000\004\032\uffc2\001\002\000\004\025\016\001\002" +
    "\000\004\014\224\001\002\000\004\015\uffdb\001\002\000" +
    "\004\024\226\001\002\000\006\014\uffda\046\uffda\001\002" +
    "\000\006\014\uffd8\046\222\001\002\000\004\014\uffd9\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\004\002\004\001\001\000\004\024\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\007" +
    "\001\001\000\004\025\042\001\001\000\004\004\013\001" +
    "\001\000\002\001\001\000\004\010\026\001\001\000\002" +
    "\001\001\000\004\010\016\001\001\000\004\050\022\001" +
    "\001\000\002\001\001\000\004\031\020\001\001\000\004" +
    "\004\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\030\001\001\000\004\004" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\040\001\001\000\004\004\041" +
    "\001\001\000\002\001\001\000\004\013\044\001\001\000" +
    "\004\017\222\001\001\000\004\026\045\001\001\000\004" +
    "\005\047\001\001\000\004\006\112\001\001\000\004\014" +
    "\050\001\001\000\004\027\107\001\001\000\004\020\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\064" +
    "\001\001\000\002\001\001\000\004\047\062\001\001\000" +
    "\004\020\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\072\001\001\000\004" +
    "\020\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\104\001\001\000\002\001\001\000\004\020\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\120\022\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\127\001\001\000\002\001\001" +
    "\000\004\035\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\134\022\122\001\001" +
    "\000\004\036\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\140\022\122\001\001\000\002\001\001" +
    "\000\006\007\142\022\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\145\001\001\000\006\007\146" +
    "\022\122\001\001\000\002\001\001\000\004\034\150\001" +
    "\001\000\004\006\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\163\022\122\001" +
    "\001\000\004\042\164\001\001\000\004\012\166\001\001" +
    "\000\004\044\173\001\001\000\004\043\167\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\172\022\122" +
    "\001\001\000\002\001\001\000\006\007\174\022\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\177" +
    "\001\001\000\002\001\001\000\006\007\201\022\122\001" +
    "\001\000\002\001\001\000\004\023\205\001\001\000\004" +
    "\052\216\001\001\000\004\051\207\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\053\212\001\001\000\004\023\213\001\001\000" +
    "\002\001\001\000\004\023\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\220\001\001\000\002\001" +
    "\001\000\004\010\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\226\001\001\000" +
    "\004\017\227\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 5;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[]) throws Exception {
		new parser(new Yylex(System.in)).parse();
	}

	public void syntax_error(Symbol cur_token) { 
		// n'interrompt pas la compil... 
		// on est par defaut dans l'etat error qui permet ensuite la recup
		// par défaut : report_error("syntax error", null);
		report_error("Syntaxe incorrecte <"+tokenToString(cur_token)+">", null);        
	}

	public void report_error(String message, Object info) {   
		// n'interrompt pas la compil
		if (info == null) System.err.println("Mon erreur <"+ ptext()+ "> ligne "+ pline() + ", colonne " + pcolumn() + " : " + message);
		else System.err.println("Mon erreur <"+ptext()+ "> ligne "+ pline() + ", colonne " + pcolumn() + " : " +message+" : "+info);
		System.err.println("-> mais on continue l'analyse... ");
	}

	public void unrecovered_syntax_error(Symbol cur_token) {
    	// par defaut : report_fatal_error("Couldn't repair and continue parse", null);
		// on n'a pas reussi a faire de la recup
		report_fatal_error("Recuperation impossible <"+tokenToString(cur_token)+">", null);   // interrompt la compil     
	}

	public void report_fatal_error(String message, Object info) {  
		// qd cette fct est appelee, message vaut par defaut "Couldn't repair and continue parse"
		String m = "Mon erreur fatale <"+ ptext()+ "> ligne " + pline() + ", colonne " + pcolumn() + " : " + message;
		if (info == null) System.err.println(m);
		else System.err.println(m+" : "+info);
		System.err.println("-> arrêt de l'analyse...");
		done_parsing(); // interrompt la compil
  	}

	public int pline(){
		return ((Yylex)getScanner()).getYyLine();
	}
	public int pcolumn(){
		return ((Yylex)getScanner()).getYyColumn();
	}
	public String ptext(){
		return ((Yylex)getScanner()).getYyText();
	}

	public String tokenToString (Symbol token) {
// qqs exemples pour voir...
   //  switch (token.sym) {
//	case sym.SI : return "SI"; 
//	case sym.CHAINE : return "CHAINE "+token.value;  
//	case sym.ENTIER : return "ENTIER "+token.value;  
	//  ... A compléter !!
	return "Token imprévu ou error";
	//}
}

	public void verifier_date(String date){
	 String result = "";
	 for(int i =1 ; i<date.length()-1;i++)
	 {
         result += date.charAt(i);
	 }
  

	 String[] res = result.split(",");
     Calendar cal = Calendar.getInstance();
     cal.setLenient(false);
	 if(res[0].length()!=4){ report_error("Erreur format date",result);}

     cal.set(Integer.parseInt(res[0]),Integer.parseInt(res[1]), Integer.parseInt(res[2]));
     try {
        cal.getTime();
     }
    catch (Exception e) {
    report_error("Erreur format date",result);
    }




	}
       
      
      public FileWriter writer(){

            
		
                         FileWriter fileWriter = null;
                try{
			fileWriter = new FileWriter("../test/code_exemple_projet/CMaisonUser.java");
                     
			//inherited method from java.io.OutputStreamWriter 
		} catch (Exception e) {
			e.printStackTrace();
		}

                return fileWriter ; 
                
}
public FileWriter writerspecific(){

            
		
                         FileWriter fileWriter = null;
                try{
			fileWriter = new FileWriter("../test/code_exemple_projet/HabitatSpecific.java");
                     
			//inherited method from java.io.OutputStreamWriter 
		} catch (Exception e) {
			e.printStackTrace();
		}

                return fileWriter ; 
                
}




			public int index_of_scenario(HashMap<String,Integer> h ,String nom_sce)
			{
                     return h.get(nom_sce);
			}


                




public String types(String s){


s = s.substring(s.indexOf("(") + 1);
s = s.substring(0, s.indexOf(")"));





switch(s){
                        case  "tv" :
 return  "TypeAppareil.AUTRE_APPAREIL_TV";
                          

                        case "hifi" :
                            
  return "TypeAppareil.AUTRE_APPAREIL_HIFI";

                        case "cafetiere" :
                            
  return "TypeAppareil.AUTRE_APPAREIL_CAFE";

                        case "video_proj" :
                               return "TypeAppareil.AUTRE_APPAREIL_VP";


                        case  "lave_linge" :
                                return "TypeAppareil.AUTRE_APPAREIL_LL";

                        case  "lave_vaisselle" :
                             return "TypeAppareil.AUTRE_APPAREIL_LV";
                        
                        case  "seche_linge" :
                             return "TypeAppareil.AUTRE_APPAREIL_SL";
			
			case  "portail" :
                             return "TypeAppareil.AUTRE_APPAREIL_PORTAIL";



           default : return s ; 
       

}}


	public String retourner_type(String s){


if(s.indexOf('(')==-1)
{
switch(s){
                        case  "eclairage" :
                            return "TypeAppareil.ECLAIRAGE";
                      	
						case "alarme" :
                             return  "TypeAppareil.ALARME";
                    		  

						case "chauffage" :
                              return "TypeAppareil.CHAUFFAGE";
							
							
						case "fenetre" :
                      		 return "TypeAppareil.FENETRE";
						

						case  "volet" :
                   			 return "TypeAppareil.VOLET";
							 
						case  "autre_appareil" :
                             return "TypeAppareil.AutreAppareil";
                     	
             
           default :          
         return s;       
}            

}
else{ return types(s); }

	}






/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



HashMap<String, String> variables = new HashMap<String, String>();
HashMap<String, String> commandes = new HashMap<String, String>();
HashMap<String, Integer> scenario_ordre = new HashMap<String, Integer>();
HashMap<String, String> scenario_map = new HashMap<String, String>();
ArrayList<String> Global = new ArrayList<String>();
List<String> eclairage = Arrays.asList("etat", "allumer", "eteindre", "tamiser");
List<String> alarme = Arrays.asList("etat","allumer", "allumer_partiel", "eteindre");
List<String> chauffage = Arrays.asList("etat", "allumer","allumer_eco", "eteindre");
List<String> fenvol = Arrays.asList("etat", "ouvrir","ouvrir_partiel", "fermer", "fermer_partiel");
List<String> autre = Arrays.asList("etat", "allumer", "eteindre");
String ens = "";
String scenario_contenu="";
String use="" ;
FileWriter file = null; 
FileWriter sepi = null; 
int f =0 ;
int c=0;

int ordre=0;
String scenario_nom="";
String message_content = " ";
int p=1;
int d=1;
String co = "\\" + "\"";
int ensemble =0;
String imbrication ="";






  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
file = writer (); 
sepi = writerspecific();

sepi.write("import java.util.ArrayList;\n");
sepi.write("public class HabitatSpecific extends Habitat {\n");
sepi.write("public HabitatSpecific(ArrayList<CAppareil> lapp, ArrayList<CEnsAppareil> lens, ArrayList<CScenario> lscen, ArrayList<CInterface> lint, ArrayList<CProgrammation> lprog)\n{\n");
sepi.write("super(lapp,lens,lscen,lint,lprog);\n}\n");
sepi.write("public void execScenarioNum(int num)\n{\n System.out.println( \"Execution du scenario \"+this.l_scenarios.get(num).getNomScenario()+\"... \");\n switch(num) {\n");






file.write("public class CMaisonUser extends CMaison {\n");  
file.write("public CMaisonUser() {\n");  
file.write("super();\n");  

  
  


           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 

for (String key : variables.keySet())
{String str = variables.get(key) ;
if (str.startsWith("autre_appareil(")){str="autre_appareil";}

switch(str){
                        case  "eclairage" :
                               file.write("CEclairage "+key+ " = new CEclairage(\""+key+"\",TypeAppareil.ECLAIRAGE);\n");
      file.write("ma_liste_appareils.add("+key+");\n");  

                      		break;
			case "alarme" :
                               file.write("CAlarme "+key+ " = new CAlarme(\""+key+"\",TypeAppareil.ALARME);\n");
      file.write("ma_liste_appareils.add("+key+");\n");  

                    		  break;

			case "chauffage" :
                          file.write("CEclairage "+key+ " = new CEclairage(\""+key+"\",TypeAppareil.CHAUFFAGE);\n");
      file.write("ma_liste_appareils.add("+key+");\n");  

                    		  break;
			case "fenetre" :
                       file.write("CVoletFenetre "+key+ " = new CVoletFenetre(\""+key+"\",TypeAppareil.FENETRE);\n");
      file.write("ma_liste_appareils.add("+key+");\n");  

                     		 break;
			case  "volet" :
                    file.write("CVoletFenetre  "+key+ " = new CVoletFenetre (\""+key+"\",TypeAppareil.VOLET);\n");
      file.write("ma_liste_appareils.add("+key+");\n");  

                     		 break;
			case  "autre_appareil" :
String ks = variables.get(key) ; 
String st = types(ks);
  file.write("CAutreAppareil  "+key+ " = new CAutreAppareil (\""+key+"\", "+ st+");\n");
   file.write("ma_liste_appareils.add("+key+");\n");  

                     		 break;
                    
                       default : 

}}

for (String keys : variables.keySet()){

if (variables.get(keys).contains(",")){
 String[]  kk = variables.get(keys).split(",");                                           
 file.write("CEnsAppareil "+keys+ " = new CEnsAppareil(\""+keys+"\");\n");
for (int i = 0; i <  kk.length ; i++ )
{
    file.write(keys+ ".addAppareil("+kk[i]+");\n");
}
file.write("ma_liste_ens_appareils.add("+keys+ ");\n");

}

}  



      
















              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;





for (String key : commandes.keySet())
{String str = commandes.get(key) ;
switch(str){
                        case  "mobile" :
                               file.write("CInterface "+key+ " = new CInterface(\""+key+"\",TypeInterface."+str.toUpperCase()+");\n");
      file.write("ma_liste_interfaces.add("+key+");\n");  

                      		break;
			case "telephone" :
                               file.write("CInterface "+key+ " = new CInterface(\""+key+"\",TypeInterface."+str.toUpperCase()+");\n");
      file.write("ma_liste_interfaces.add("+key+");\n");  

                    		  break;

			case "telecommande" :
                          file.write("CInterface "+key+ " = new CInterface(\""+key+"\",TypeInterface."+str.toUpperCase()+");\n");
      file.write("ma_liste_interfaces.add("+key+");\n");  

                    		  break;
			case "tablette" :
                       file.write("CInterface "+key+ " = new CInterface(\""+key+"\",TypeInterface."+str.toUpperCase()+");\n");
      file.write("ma_liste_interfaces.add("+key+");\n");  

                     		 break;
			case  "interrupteur" : 
                    file.write("CInterface   "+key+ " = new CInterface(\""+key+"\",TypeInterface."+str.toUpperCase()+");\n");
      file.write("ma_liste_interfaces.add("+key+");\n");  

                     		 break;
                       case  "ordinateur" :
                    file.write("CInterface "+key+ " = new CInterface(\""+key+"\",TypeInterface."+str.toUpperCase()+");\n");
      file.write("ma_liste_interfaces.add("+key+");\n");  

                     		 break;
			
             
                       default : ;      




}  }






















              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;









              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= PDO NT$0 da NT$1 di NT$2 ds dc NT$3 PDF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
System.out.println(co);
 System.out.println("Analyse terminne !!");
        file.write("monHabitat = new HabitatSpecific(ma_liste_appareils,ma_liste_ens_appareils, ma_liste_scenarios,ma_liste_interfaces, ma_liste_programmations);\n");
        file.write("}\n");
         file.write("}\n");
      for (String key : scenario_ordre.keySet()){

        sepi.write(" case "+scenario_ordre.get(key)+":      \n");
		//System.out.println("l  ecriturte "+ key + "  "+scenario_ordre.get(key));
          sepi.write( scenario_map.get(key).replace("\\","")  +   "\n");
	sepi.write( "break;\n");


}

      sepi.write( "default :     \n");
 sepi.write( "}\n}\n}\n");




















   

 try {
				if (file!= null) {
					file.flush();
					file.close();					
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
try {
				if (sepi!= null) {
					sepi.flush();
					sepi.close();					
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // da ::= DAO dad DAF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("da",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$4 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;


  for (int i=0;i<Global.size();i++){if (!variables.containsKey(Global.get(i))) {
    variables.put(Global.get(i),type);} else {report_error("La variable "+Global.get(i)+" existe deja",Global.get(i));}}
   Global.clear();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dad ::= APPAREIL_TYPE MOT PT NT$4 dad 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dad",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$5 ::= 
            {
              Object RESULT =null;
		int autreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int autreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String autre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

   for (int j=0;j<Global.size();j++){if (!variables.containsKey(Global.get(j))) {
   variables.put(Global.get(j),autre);} else {report_error("La variable "+Global.get(j)+" existe deja",Global.get(j));}}
   Global.clear();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dad ::= AUTRE_APPAREIL MOT PT NT$5 dad 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int autreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int autreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String autre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dad",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$6 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

   for (int j=0;j<Global.size();j++){ens+=Global.get(j);if ((j+1)< Global.size()){ens+=",";}}if (!variables.containsKey(name)) {
   variables.put(name,ens);} else {report_error("La variable "+name+" existe deja",name);}
ens="";
   Global.clear();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // dad ::= DEFINIR nom EGAL AO MOT AF PT NT$6 dad 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dad",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // dad ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dad",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ds ::= DSO dsd DSF 
            {
              Object RESULT =null;
			

				for (int i=0; i<scenario_ordre.size();i++){
					
			for (String key : scenario_map.keySet()) {
				if(i== scenario_ordre.get(key)){
             file.write("\n String "+ key+"_contenu  = " + "\""+ scenario_map.get(key) +" \" ; \n" );
		      file.write("CScenario "+ key +" = new CScenario(\""+key+"\","+key+"_contenu ) ;\n");
			  file.write("ma_liste_scenarios.add("+key+"); \n");
				}
           

		}



				}
			
			

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ds",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$7 ::= 
            {
              Object RESULT =null;
		int openleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int openright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String open = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  
String[] str = open.split(" ");
String u = str[1];
String us= u.substring(0,u.length() - 1 );
scenario_nom = us ;
commandes.put(us,"scenario");

               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int openleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int openright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String open = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
scenario_map.put(scenario_nom,scenario_contenu);  
			     scenario_ordre.put(scenario_nom,ordre);
				// System.out.println("ordre scenario est "+ scenario_nom + "  "+ordre);
				 ordre++;
				 scenario_nom=""; scenario_contenu=""; 
			    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // dsd ::= DSCO NT$7 scenario DSCF NT$8 dsd 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int openleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int openright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String open = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int finright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dsd",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // dsd ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dsd",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$9 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 variables.put(n,use); use=""; 
f = 1;

if(variables.containsKey(type)){ // declaration dans un ensemble
ensemble =1;
scenario_contenu+="for(CEnsAppareil ensAppareil : this.l_ensembles){" ;
scenario_contenu+="  if (ensAppareil.nomEnsAppareil.equals("+co+retourner_type(type)+co+")) { ";

}
else if(type.equals("autre_appareil")){ // si autre appareil sans specifications

scenario_contenu+="for(CAppareil appareil : this.l_appareils){" ;
scenario_contenu+="  if (appareil.estTypeAutreAppareil())  { ";

}
else { // appareil ordinaires ou autre_appareil(hifi.....)
ensemble =0;
scenario_contenu+=" for(CAppareil appareil : this.l_appareils) {" ;
scenario_contenu+="  if (appareil.typeAppareil.equals("+retourner_type(type)+")) {   ";

}


              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
scenario_contenu+=" } }"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // scenario ::= POURTOUT nom DP x NT$9 FAIRE scenario NT$10 FAIT PV scenario 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		 variables.remove(n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scenario",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$11 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int actionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int actionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String action = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;


if (!variables.containsKey(n)){report_error("La variable "+n+" n'a pas été declarée",n);}             
           else {
if(f == 1){
	if(ensemble==1){ ensemble=0 ;
	scenario_contenu+="for(CAppareil appareil : ensAppareil.lAppareils) appareil.appliquer(TypeActionAppareil."+action.toUpperCase()+");" ;
	}
	else{
  scenario_contenu+="appareil.appliquer(TypeActionAppareil."+action.toUpperCase()+"); ";
	}
	f =0;
}
else if (c==1){

scenario_contenu+=" appareil"+imbrication+".appliquer(TypeActionAppareil."+action.toUpperCase()+");   " ;
 c=0;

}
else{
scenario_contenu+=" for(CAppareil appareil : this.l_appareils)   {" ;
scenario_contenu+="  if (appareil.getNomAppareil().equals("+co+n+co+"))     ";
scenario_contenu+="appareil.appliquer(TypeActionAppareil."+action.toUpperCase()+"); } ";		
		   }	 

String str = variables.get(n) ; 
if (str.startsWith("autre_appareil(")){str = "autre_appareil"; }
if (variables.containsKey(str)){String[] k = variables.get(str).split(",");str =variables.get( k[0] );}
boolean b = false ; 


switch(str){
                        case  "eclairage" :
                               if (eclairage.contains(action)) { b = true ;}
                      		break;
			case "alarme" :
                                if (alarme.contains(action)) { b = true;} 
                    		  break;
			case "chauffage" :
                                if (chauffage.contains(action)) { b = true;} 
                    		  break;
			case "fenetre" :
                                 if (fenvol.contains(action)){ b = true;} 
                     		 break;
			case  "volet" :
                                if (fenvol.contains(action)) {b = true ;}
                     		 break;
			case  "autre_appareil" :
                               if (autre.contains(action))  {b = true;} 
                     		 break;
                       default : 
                               b = false ;
}

if ( b== false ) {   report_error(action+ " n'est pas autorisee pour la variable "+n,action.toUpperCase());     }


}


   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // scenario ::= nom PT ACTION NT$11 PV scenario 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int actionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int actionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String action = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scenario",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$12 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 scenario_contenu+=" this.execScenarioNum("+index_of_scenario(scenario_ordre,n) +"); " ;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // scenario ::= EXECUTER_SCENARIO nom PV NT$12 scenario 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scenario",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$13 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

c=1;
if(imbrication==""){
imbrication="0";
}
else {int k =(Integer.parseInt(imbrication)+1);
imbrication= ""+k;}
scenario_contenu+=" for(CAppareil appareil"+imbrication+" : this.l_appareils){   ";
scenario_contenu+="if (appareil"+imbrication+".getNomAppareil().equals("+co+n+co+")){ ";
scenario_contenu+= "if (appareil"+imbrication+".etatAppareil.equals(TypeEtatAppareil."+e.toUpperCase()+")) { ";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
scenario_contenu+="}";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
scenario_contenu+="}}";imbrication=""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // scenario ::= SI PO nom PT ETAT DEGAL ETATS NT$13 PF ALORS scenario NT$14 sinon NT$15 FSI PV scenario 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scenario",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // scenario ::= msgs PV scenario 
            {
              Object RESULT =null;
		scenario_contenu+="  System.out.println(" +message_content+ ") ;  " ; message_content="";  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scenario",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // scenario ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scenario",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$16 ::= 
            {
              Object RESULT =null;
scenario_contenu+="  else { "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sinon ::= SINON NT$16 scenario 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		scenario_contenu+="} ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sinon",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sinon ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sinon",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // x ::= nom 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; use=n;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("x",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // x ::= APPAREIL_TYPE 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = n; use=n;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("x",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // x ::= AUTRE_APPAREIL 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; use=n;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("x",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // di ::= DIO did DIF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("di",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$17 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

   for (int j=0;j<Global.size();j++){if (!commandes.containsKey(Global.get(j))) {
   commandes.put(Global.get(j),type);} else {report_error("L'interface "+Global.get(j)+" existe deja",Global.get(j));}}
   Global.clear();


              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // did ::= INTERFACE_TYPE MOT PT NT$17 did 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("did",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // did ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("did",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // dc ::= DCO dcd DCF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dc",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // dcd ::= ASSOCIER nom EGAL nom PT dcd 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int scenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int scenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String scen = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if (!commandes.containsKey(name)){report_error("L'interface "+name+" n'a pas été declarée",name);}
 file.write(name+ ".addScenarioAssocie(\""+ scen +"\");\n");


 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dcd",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // dcd ::= ASSOCIER nom EGAL AO MOT AF PT dcd 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 if (!commandes.containsKey(name)){report_error("L'interface "+name+" n'a pas été declarée",name);}
 for (int j=0;j<Global.size();j++){
  file.write(name+ ".addScenarioAssocie(\""+ Global.get(j) +"\");\n");
}
 Global.clear();

 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dcd",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$18 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
 if (!commandes.containsKey(name)){report_error("Le scenario "+name+" n'a pas été declarée",name);}
  file.write("CProgrammation p"+ p +" = new CProgrammation(\""+name+"\");\n");
for (int j=0;j<Global.size();j++){
 String ds = Global.get(j).replace("_","-1");
  file.write("CDate p"+ p +"d"+d+" = new CDate"+ds+ ";\n");
 file.write("p"+ p +".addDate(p"+p+"d"+d+");\n");
d++;


}
 file.write("ma_liste_programmations.add(p"+p+");\n");
p++;
  d= 1 ;
Global.clear();
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dcd ::= PROGRAMMER nom EGAL AO dat AF PT NT$18 dcd 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dcd",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$19 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String dt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
verifier_date(dt.replace("_","0001")); if (!commandes.containsKey(name)){report_error("Le scenario "+name+" n'a pas été declarée",name);}
  String ds = dt.replace("_","-1");
  file.write("CProgrammation p"+ p +" = new CProgrammation(\""+name+"\");\n");
  file.write("CDate p"+ p +"d"+d+" = new CDate"+ds+ ";\n");
 file.write("p"+ p +".addDate(p"+p+"d"+d+");\n");
  file.write("ma_liste_programmations.add(p"+p+");\n");
  p++;
  d= 1 ;
           

 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dcd ::= PROGRAMMER nom EGAL DATE PT NT$19 dcd 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String dt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dcd",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // dcd ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dcd",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // dat ::= DATE VG dat 
            {
              String RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String dd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		verifier_date( dd.replace("_","0001") ); Global.add(dd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // dat ::= DATE 
            {
              String RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    verifier_date(dd.replace("_","0001") ); Global.add(dd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // mesgouact ::= nom PT ACTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mesgouact",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // mesgouact ::= msgs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mesgouact",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // mesgouact ::= mesgouact PV nom PT ACTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mesgouact",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // mesgouact ::= mesgouact PV msgs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mesgouact",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$20 ::= 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Global.add(x);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // MOT ::= nom NT$20 VG MOT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MOT ::= nom 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Global.add(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // msgs ::= MESSAGE PO msg PF 
            {
              String RESULT =null;
		System.out.println("5ra");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("msgs",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$21 ::= 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
    message_content += co+ n +co+',' ;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // msg ::= nom NT$21 VG msg 
            {
              String RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("msg",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$22 ::= 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 message_content+=( c.replace("\"",co))+',' ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // msg ::= cm NT$22 VG msg 
            {
              String RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("msg",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // msg ::= nom 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    message_content += co+ n +co  ;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("msg",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // msg ::= cm 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  message_content+=( c.replace("\"",co)) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("msg",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$23 ::= 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
message_content+=(n+".getNomAppareil()"+'.'+e.toUpperCase()) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // msg ::= nom PT ETAT NT$23 msg 
            {
              String RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("msg",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // msg ::= nom PT ETAT 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		message_content+=n+'.'+e.toUpperCase() ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("msg",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
