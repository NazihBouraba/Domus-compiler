
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java.util.*;
import java_cup.runtime.*;
import java.lang.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\024\002\000\002\025\002\000\002\026" +
    "\002\000\002\002\013\000\002\002\004\000\002\003\005" +
    "\000\002\027\002\000\002\004\007\000\002\030\002\000" +
    "\002\004\007\000\002\031\002\000\002\004\013\000\002" +
    "\004\002\000\002\005\005\000\002\032\002\000\002\006" +
    "\007\000\002\006\002\000\002\033\002\000\002\007\014" +
    "\000\002\034\002\000\002\007\010\000\002\007\006\000" +
    "\002\007\020\000\002\007\005\000\002\007\002\000\002" +
    "\012\004\000\002\012\002\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\013\005\000\002\035\002" +
    "\000\002\017\007\000\002\017\002\000\002\014\005\000" +
    "\002\020\010\000\002\020\012\000\002\020\012\000\002" +
    "\020\010\000\002\020\002\000\002\015\005\000\002\015" +
    "\003\000\002\021\005\000\002\021\003\000\002\021\007" +
    "\000\002\021\005\000\002\036\002\000\002\010\006\000" +
    "\002\010\003\000\002\022\006\000\002\023\005\000\002" +
    "\023\005\000\002\023\003\000\002\023\003\000\002\023" +
    "\006\000\002\023\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\004\006\004\001\002\000\004\011\001\001" +
    "\002\000\004\002\006\001\002\000\004\002\ufffd\001\002" +
    "\000\004\011\011\001\002\000\004\013\000\001\002\000" +
    "\012\012\ufff5\043\013\044\015\045\012\001\002\000\004" +
    "\025\033\001\002\000\004\025\016\001\002\000\004\012" +
    "\026\001\002\000\004\025\016\001\002\000\010\023\uffd3" +
    "\024\uffd1\030\uffd1\001\002\000\004\024\020\001\002\000" +
    "\012\012\ufff9\043\ufff9\044\ufff9\045\ufff9\001\002\000\012" +
    "\012\ufff5\043\013\044\015\045\012\001\002\000\004\012" +
    "\ufff8\001\002\000\004\023\024\001\002\000\004\025\016" +
    "\001\002\000\006\024\uffd2\030\uffd2\001\002\000\004\013" +
    "\ufffc\001\002\000\004\024\030\001\002\000\012\012\ufffb" +
    "\043\ufffb\044\ufffb\045\ufffb\001\002\000\012\012\ufff5\043" +
    "\013\044\015\045\012\001\002\000\004\012\ufffa\001\002" +
    "\000\004\033\034\001\002\000\004\027\035\001\002\000" +
    "\004\025\016\001\002\000\004\030\037\001\002\000\004" +
    "\024\040\001\002\000\012\012\ufff7\043\ufff7\044\ufff7\045" +
    "\ufff7\001\002\000\012\012\ufff5\043\013\044\015\045\012" +
    "\001\002\000\004\012\ufff6\001\002\000\004\013\044\001" +
    "\002\000\006\014\uffe0\046\205\001\002\000\004\015\uffff" +
    "\001\002\000\004\015\047\001\002\000\006\016\ufff1\021" +
    "\107\001\002\000\004\017\052\001\002\000\004\007\106" +
    "\001\002\000\010\020\uffda\047\053\050\055\001\002\000" +
    "\004\025\074\001\002\000\004\020\073\001\002\000\004" +
    "\025\056\001\002\000\004\033\057\001\002\000\006\005" +
    "\061\027\060\001\002\000\004\005\065\001\002\000\004" +
    "\024\062\001\002\000\010\020\uffda\047\053\050\055\001" +
    "\002\000\004\020\uffdb\001\002\000\004\030\070\001\002" +
    "\000\006\023\066\030\uffd8\001\002\000\004\005\065\001" +
    "\002\000\004\030\uffd9\001\002\000\004\024\071\001\002" +
    "\000\010\020\uffda\047\053\050\055\001\002\000\004\020" +
    "\uffdc\001\002\000\004\007\uffdf\001\002\000\004\033\075" +
    "\001\002\000\006\025\076\027\077\001\002\000\004\024" +
    "\104\001\002\000\004\025\016\001\002\000\004\030\101" +
    "\001\002\000\004\024\102\001\002\000\010\020\uffda\047" +
    "\053\050\055\001\002\000\004\020\uffdd\001\002\000\010" +
    "\020\uffda\047\053\050\055\001\002\000\004\020\uffde\001" +
    "\002\000\004\002\ufffe\001\002\000\016\022\ufff3\025\ufff3" +
    "\052\ufff3\053\ufff3\055\ufff3\062\ufff3\001\002\000\004\016" +
    "\111\001\002\000\004\017\ufff4\001\002\000\016\022\uffe9" +
    "\025\114\052\115\053\113\055\121\062\117\001\002\000" +
    "\004\031\171\001\002\000\004\024\164\001\002\000\004" +
    "\031\145\001\002\000\004\022\143\001\002\000\004\025" +
    "\140\001\002\000\004\036\136\001\002\000\004\025\122" +
    "\001\002\000\004\035\123\001\002\000\010\025\127\043" +
    "\124\044\126\001\002\000\004\057\uffe5\001\002\000\004" +
    "\057\ufff0\001\002\000\004\057\uffe4\001\002\000\004\057" +
    "\uffe6\001\002\000\004\057\131\001\002\000\016\025\114" +
    "\052\115\053\113\055\121\056\uffe9\062\117\001\002\000" +
    "\004\056\133\001\002\000\004\036\134\001\002\000\024" +
    "\022\uffe9\025\114\052\115\053\113\054\uffe9\055\121\056" +
    "\uffe9\061\uffe9\062\117\001\002\000\012\022\uffef\054\uffef" +
    "\056\uffef\061\uffef\001\002\000\024\022\uffe9\025\114\052" +
    "\115\053\113\054\uffe9\055\121\056\uffe9\061\uffe9\062\117" +
    "\001\002\000\012\022\uffea\054\uffea\056\uffea\061\uffea\001" +
    "\002\000\004\036\141\001\002\000\024\022\uffe9\025\114" +
    "\052\115\053\113\054\uffe9\055\121\056\uffe9\061\uffe9\062" +
    "\117\001\002\000\012\022\uffec\054\uffec\056\uffec\061\uffec" +
    "\001\002\000\006\016\ufff1\021\107\001\002\000\004\016" +
    "\ufff2\001\002\000\004\025\146\001\002\000\004\024\147" +
    "\001\002\000\004\040\150\001\002\000\004\034\151\001" +
    "\002\000\004\060\152\001\002\000\004\032\153\001\002" +
    "\000\004\063\154\001\002\000\020\025\114\052\115\053" +
    "\113\054\uffe9\055\121\061\uffe9\062\117\001\002\000\006" +
    "\054\156\061\uffe7\001\002\000\016\025\114\052\115\053" +
    "\113\055\121\061\uffe9\062\117\001\002\000\004\061\160" +
    "\001\002\000\004\036\161\001\002\000\024\022\uffe9\025" +
    "\114\052\115\053\113\054\uffe9\055\121\056\uffe9\061\uffe9" +
    "\062\117\001\002\000\012\022\uffeb\054\uffeb\056\uffeb\061" +
    "\uffeb\001\002\000\004\061\uffe8\001\002\000\004\004\165" +
    "\001\002\000\004\036\uffee\001\002\000\004\036\167\001" +
    "\002\000\024\022\uffe9\025\114\052\115\053\113\054\uffe9" +
    "\055\121\056\uffe9\061\uffe9\062\117\001\002\000\012\022" +
    "\uffed\054\uffed\056\uffed\061\uffed\001\002\000\006\025\173" +
    "\051\172\001\002\000\006\023\203\032\uffcc\001\002\000" +
    "\010\023\176\024\177\032\uffcd\001\002\000\004\032\175" +
    "\001\002\000\004\036\uffd0\001\002\000\006\025\173\051" +
    "\172\001\002\000\004\040\200\001\002\000\010\025\173" +
    "\032\uffca\051\172\001\002\000\004\032\uffcb\001\002\000" +
    "\004\032\uffcf\001\002\000\006\025\173\051\172\001\002" +
    "\000\004\032\uffce\001\002\000\004\025\016\001\002\000" +
    "\004\014\207\001\002\000\004\015\uffe3\001\002\000\004" +
    "\024\211\001\002\000\006\014\uffe2\046\uffe2\001\002\000" +
    "\006\014\uffe0\046\205\001\002\000\004\014\uffe1\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\004\002\004\001\001\000\004\024\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\007" +
    "\001\001\000\004\025\042\001\001\000\004\004\013\001" +
    "\001\000\002\001\001\000\004\010\026\001\001\000\002" +
    "\001\001\000\004\010\016\001\001\000\004\036\022\001" +
    "\001\000\002\001\001\000\004\030\020\001\001\000\004" +
    "\004\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\030\001\001\000\004\004" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\040\001\001\000\004\004\041" +
    "\001\001\000\002\001\001\000\004\013\044\001\001\000" +
    "\004\017\205\001\001\000\004\026\045\001\001\000\004" +
    "\005\047\001\001\000\004\006\107\001\001\000\004\014" +
    "\050\001\001\000\002\001\001\000\004\020\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\063\001\001" +
    "\000\002\001\001\000\004\020\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\102\001\001\000\002\001\001\000\004\020\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\115\022\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\124\001\001\000\002\001\001\000\004\033\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\131\022\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\134\022\117\001\001\000\002" +
    "\001\001\000\006\007\136\022\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\141\022\117\001\001" +
    "\000\002\001\001\000\004\006\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\154\022\117\001\001\000\004" +
    "\012\156\001\001\000\006\007\162\022\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\161\022\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\165\001\001\000\002\001\001\000\006" +
    "\007\167\022\117\001\001\000\002\001\001\000\004\023" +
    "\173\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\201\001\001\000" +
    "\002\001\001\000\004\023\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\203\001\001\000\002\001" +
    "\001\000\004\010\207\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\211\001\001\000" +
    "\004\017\212\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 4;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[]) throws Exception {
		new parser(new Yylex(System.in)).parse();
	}

	public void syntax_error(Symbol cur_token) { 
		// n'interrompt pas la compil... 
		// on est par defaut dans l'etat error qui permet ensuite la recup
		// par défaut : report_error("syntax error", null);
		report_error("Syntaxe incorrecte <"+tokenToString(cur_token)+">", null);        
	}

	public void report_error(String message, Object info) {   
		// n'interrompt pas la compil
		if (info == null) System.err.println("Mon erreur <"+ ptext()+ "> ligne "+ pline() + ", colonne " + pcolumn() + " : " + message);
		else System.err.println("Mon erreur <"+ptext()+ "> ligne "+ pline() + ", colonne " + pcolumn() + " : " +message+" : "+info);
		System.err.println("-> mais on continue l'analyse... ");
	}

	public void unrecovered_syntax_error(Symbol cur_token) {
    	// par defaut : report_fatal_error("Couldn't repair and continue parse", null);
		// on n'a pas reussi a faire de la recup
		report_fatal_error("Recuperation impossible <"+tokenToString(cur_token)+">", null);   // interrompt la compil     
	}

	public void report_fatal_error(String message, Object info) {  
		// qd cette fct est appelee, message vaut par defaut "Couldn't repair and continue parse"
		String m = "Mon erreur fatale <"+ ptext()+ "> ligne " + pline() + ", colonne " + pcolumn() + " : " + message;
		if (info == null) System.err.println(m);
		else System.err.println(m+" : "+info);
		System.err.println("-> arrêt de l'analyse...");
		done_parsing(); // interrompt la compil
  	}

	public int pline(){
		return ((Yylex)getScanner()).getYyLine();
	}
	public int pcolumn(){
		return ((Yylex)getScanner()).getYyColumn();
	}
	public String ptext(){
		return ((Yylex)getScanner()).getYyText();
	}

	public String tokenToString (Symbol token) {
// qqs exemples pour voir...
   //  switch (token.sym) {
//	case sym.SI : return "SI"; 
//	case sym.CHAINE : return "CHAINE "+token.value;  
//	case sym.ENTIER : return "ENTIER "+token.value;  
	//  ... A compléter !!
	return "Token imprévu ou error";
	//}
}

	public void verifier_date(String date){
	 String result = "";
	 for(int i =1 ; i<date.length()-1;i++)
	 {
         result += date.charAt(i);
	 }
  

	 String[] res = result.split(",");
     Calendar cal = Calendar.getInstance();
     cal.setLenient(false);
	 if(res[0].length()!=4){ report_error("Erreur format date",result);}
     cal.set(Integer.parseInt(res[0]),Integer.parseInt(res[1]), Integer.parseInt(res[2]));
     try {
        cal.getTime();
     }
    catch (Exception e) {
    report_error("Erreur format date",result);
    }




	}
       
      
      public FileWriter writer(){

            
		
                         FileWriter fileWriter = null;
                try{
			fileWriter = new FileWriter("/home/zaki/Desktop/Git/CMaisonUser.java\n");
                     
			//inherited method from java.io.OutputStreamWriter 
		} catch (Exception e) {
			e.printStackTrace();
		}

                return fileWriter ; 
                




}
public String types(String s){


s = s.substring(s.indexOf("(") + 1);
s = s.substring(0, s.indexOf(")"));





switch(s){
                        case  "tv" :
 return  "TypeAppareil.AUTRE_APPAREIL_TV";
                          

                        case "hifi" :
                            
  return "TypeAppareil.AUTRE_APPAREIL_HIFI";

                        case "cafetiere" :
                            
  return "TypeAppareil.AUTRE_APPAREIL_CAFE";

                        case "video_proj" :
                               return "TypeAppareil.AUTRE_APPAREIL_VP";


                        case  "lave_linge" :
                                return "TypeAppareil.AUTRE_APPAREIL_LL";

                        case  "lave_vaisselle" :
                             return "TypeAppareil.AUTRE_APPAREIL_LV";
                        
                        case  "seche_linge" :
                             return "TypeAppareil.AUTRE_APPAREIL_SL";
			
			case  "portail" :
                             return "TypeAppareil.AUTRE_APPAREIL_PORTAIL";



           default : return s ; 
       

}}

    




















/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



HashMap<String, String> variables = new HashMap<String, String>();
HashMap<String, String> commandes = new HashMap<String, String>();
ArrayList<String> Global = new ArrayList<String>();
List<String> eclairage = Arrays.asList("etat", "allumer", "eteindre", "tamiser");
List<String> alarme = Arrays.asList("etat","allumer", "allumer_partiel", "eteindre");
List<String> chauffage = Arrays.asList("etat", "allumer","allumer_eco", "eteindre");
List<String> fenvol = Arrays.asList("etat", "ouvrir","ouvrir_partiel", "fermer", "fermer_partiel");
List<String> autre = Arrays.asList("etat", "allumer", "eteindre");
String ens = "";
String use="" ;
FileWriter file = null; 







  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
file = writer (); 
file.write("public class CMaisonUser extends CMaison {\n");  
file.write("public CMaisonUser() {\n");  
file.write("super();\n");  

  
  


           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 

for (String key : variables.keySet())
{String str = variables.get(key) ;
if (str.startsWith("autre_appareil(")){str="autre_appareil";}
switch(str){
                        case  "eclairage" :
                               file.write("CEclairage "+key+ " = new CEclairage(\""+key+"\",TypeAppareil.ECLAIRAGE);\n");
      file.write("ma_liste_appareils.add("+key+");\n");  

                      		break;
			case "alarme" :
                               file.write("CAlarme "+key+ " = new CAlarme(\""+key+"\",TypeAppareil.ALARME);\n");
      file.write("ma_liste_appareils.add("+key+");\n");  

                    		  break;

			case "chauffage" :
                          file.write("CEclairage "+key+ " = new CEclairage(\""+key+"\",TypeAppareil.CHAUFFAGE);\n");
      file.write("ma_liste_appareils.add("+key+");\n");  

                    		  break;
			case "fenetre" :
                       file.write("CVoletFenetre "+key+ " = new CVoletFenetre(\""+key+"\",TypeAppareil.FENETRE);\n");
      file.write("ma_liste_appareils.add("+key+");\n");  

                     		 break;
			case  "volet" :
                    file.write("CVoletFenetre  "+key+ " = new CVoletFenetre (\""+key+"\",TypeAppareil.VOLET);\n");
      file.write("ma_liste_appareils.add("+key+");\n");  

                     		 break;
			case  "autre_appareil" :
String ks = variables.get(key) ; 
String st = types(ks);
  file.write("CAutreAppareil  "+key+ " = new CAutreAppareil (\""+key+"\", "+ st+");\n");
   file.write("ma_liste_appareils.add("+key+");\n");  

                     		 break;
             
                       default : if (str.contains(",")){ String[]  k = str.split(",");                                           
 file.write("CEnsAppareil "+key+ " = new CEnsAppareil(\""+key+"\");\n");
for (int i = 0; i <  k.length ; i++ )
{
    file.write(key+ ".addAppareil("+k[i]+");\n");
}
file.write("ma_liste_ens_appareils.add("+key+ ");\n");
}
                             




}  }



      
















              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
















              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= PDO NT$0 da NT$1 di NT$2 ds dc PDF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
 System.out.println("Analyse terminne !!");
 try {
				if (file!= null) {
					file.flush();
					file.close();					
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // da ::= DAO dad DAF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("da",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$3 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;


  for (int i=0;i<Global.size();i++){if (!variables.containsKey(Global.get(i))) {
    variables.put(Global.get(i),type);} else {report_error("La variable "+Global.get(i)+" existe deja",Global.get(i));}}
   Global.clear();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dad ::= APPAREIL_TYPE MOT PT NT$3 dad 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dad",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$4 ::= 
            {
              Object RESULT =null;
		int autreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int autreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String autre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

   for (int j=0;j<Global.size();j++){if (!variables.containsKey(Global.get(j))) {
   variables.put(Global.get(j),autre);} else {report_error("La variable "+Global.get(j)+" existe deja",Global.get(j));}}
   Global.clear();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dad ::= AUTRE_APPAREIL MOT PT NT$4 dad 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int autreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int autreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String autre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dad",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$5 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

   for (int j=0;j<Global.size();j++){ens+=Global.get(j);if ((j+1)< Global.size()){ens+=",";}}if (!variables.containsKey(name)) {
   variables.put(name,ens);} else {report_error("La variable "+name+" existe deja",name);}
ens="";
   Global.clear();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // dad ::= DEFINIR nom EGAL AO MOT AF PT NT$5 dad 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dad",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // dad ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dad",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ds ::= DSO dsd DSF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ds",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              Object RESULT =null;
		int openleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int openright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String open = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
  
String[] str = open.split(" ");
String u = str[1];
String us= u.substring(0,u.length() - 1 );
commandes.put(us,"scenario");

               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // dsd ::= DSCO NT$6 scenario DSCF dsd 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int openleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int openright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String open = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int finright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dsd",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // dsd ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dsd",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$7 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 variables.put(n,use); use=""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // scenario ::= POURTOUT nom DP x NT$7 FAIRE scenario FAIT PV scenario 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		 variables.remove(n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scenario",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$8 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int actionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int actionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String action = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if (!variables.containsKey(n)){report_error("La variable "+n+" n'a pas été declarée",n);}             
           else {
String str = variables.get(n) ; 
if (str.startsWith("autre_appareil(")){str = "autre_appareil"; }
if (variables.containsKey(str)){String[] k = variables.get(str).split(",");str =variables.get( k[0] );}
boolean b = false ; 


switch(str){
                        case  "eclairage" :
                               if (eclairage.contains(action)) { b = true ;}
                      		break;
			case "alarme" :
                                if (alarme.contains(action)) { b = true;} 
                    		  break;
			case "chauffage" :
                                if (chauffage.contains(action)) { b = true;} 
                    		  break;
			case "fenetre" :
                                 if (fenvol.contains(action)){ b = true;} 
                     		 break;
			case  "volet" :
                                if (fenvol.contains(action)) {b = true ;}
                     		 break;
			case  "autre_appareil" :
                               if (autre.contains(action))  {b = true;} 
                     		 break;
                       default : 
                               b = false ;
}

if ( b== false ) {   report_error(action+ " n'est pas autorisee pour la variable "+n,action);     }


}


   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // scenario ::= nom PT ACTION NT$8 PV scenario 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int actionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int actionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String action = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scenario",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // scenario ::= EXECUTER_SCENARIO nom PV scenario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scenario",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // scenario ::= SI PO nom PT ETAT DEGAL ETATS PF ALORS scenario sinon FSI PV scenario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scenario",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // scenario ::= msgs PV scenario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scenario",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // scenario ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scenario",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sinon ::= SINON scenario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sinon",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sinon ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sinon",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // x ::= nom 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		use=n;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("x",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // x ::= APPAREIL_TYPE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		use=n;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("x",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // x ::= AUTRE_APPAREIL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		use=n;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("x",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // di ::= DIO did DIF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("di",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$9 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

   for (int j=0;j<Global.size();j++){if (!commandes.containsKey(Global.get(j))) {
   commandes.put(Global.get(j),type);} else {report_error("L'interface "+Global.get(j)+" existe deja",Global.get(j));}}
   Global.clear();


              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // did ::= INTERFACE_TYPE MOT PT NT$9 did 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("did",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // did ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("did",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // dc ::= DCO dcd DCF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dc",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // dcd ::= ASSOCIER nom EGAL nom PT dcd 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 if (!commandes.containsKey(name)){report_error("L'interface "+name+" n'a pas été declarée",name);}


 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dcd",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // dcd ::= ASSOCIER nom EGAL AO MOT AF PT dcd 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 if (!commandes.containsKey(name)){report_error("L'interface "+name+" n'a pas été declarée",name);}


 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dcd",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // dcd ::= PROGRAMMER nom EGAL AO dat AF PT dcd 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 if (!commandes.containsKey(name)){report_error("Le scenario "+name+" n'a pas été declarée",name);}


 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dcd",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // dcd ::= PROGRAMMER nom EGAL DATE PT dcd 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if (!commandes.containsKey(name)){report_error("Le scenario "+name+" n'a pas été declarée",name);}


 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dcd",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // dcd ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dcd",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // dat ::= DATE VG dat 
            {
              String RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String dd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 verifier_date(dd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // dat ::= DATE 
            {
              String RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 verifier_date(dd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // mesgouact ::= nom PT ACTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mesgouact",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // mesgouact ::= msgs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mesgouact",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // mesgouact ::= mesgouact PV nom PT ACTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mesgouact",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // mesgouact ::= mesgouact PV msgs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mesgouact",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$10 ::= 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Global.add(x);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // MOT ::= nom NT$10 VG MOT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // MOT ::= nom 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Global.add(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // msgs ::= MESSAGE PO msg PF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("msgs",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // msg ::= nom VG msg 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("msg",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // msg ::= cm VG msg 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("msg",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // msg ::= nom 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("msg",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // msg ::= cm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("msg",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // msg ::= nom PT ETAT msg 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("msg",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // msg ::= nom PT ETAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("msg",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
